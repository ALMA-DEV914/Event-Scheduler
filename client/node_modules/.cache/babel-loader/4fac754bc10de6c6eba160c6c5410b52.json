{"ast":null,"code":"import _objectSpread from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/TopBar/ResetForm.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport { EMAIL, EMAIL_ERROR, USER_API_ROUTE, USER_ERRORS } from \"../../constants\";\nimport \"../../styles/UserForm.css\";\n\nvar ResetForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResetForm, _Component);\n\n  function ResetForm() {\n    var _getPrototypeOf2, _this$initialState;\n\n    var _this;\n\n    _classCallCheck(this, ResetForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResetForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.initialState = (_this$initialState = {}, _defineProperty(_this$initialState, EMAIL, \"\"), _defineProperty(_this$initialState, EMAIL_ERROR, \"\"), _defineProperty(_this$initialState, \"isWaitingApi\", false), _this$initialState);\n    _this.state = _objectSpread({}, _this.initialState);\n\n    _this.handleInputValueChange = function (event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name; // validate input and get error object\n\n      var err = userFormInputValidators[name](value);\n\n      _this.setState(_objectSpread({}, err, _defineProperty({}, name, value)));\n    };\n\n    _this.toggleInputClassBy = classTogglerBuilder(\"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\", \"cd-signin-modal__input--has-error\");\n    _this.toggleSpanClassBy = classTogglerBuilder(\"cd-signin-modal__error\", \"cd-signin-modal__error--is-visible\");\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault(); // check if required field is empty\n\n      var emailInput = _this.state[EMAIL];\n\n      if (!emailInput) {\n        return _this.setState(_defineProperty({}, EMAIL_ERROR, \"This field is required\"));\n      } // set state to indicate waiting api response\n\n\n      _this.setState({\n        isWaitingApi: true\n      }); // make a request to api\n\n\n      axios.delete(\"\".concat(USER_API_ROUTE), {\n        data: {\n          email: emailInput\n        }\n      }).then(function (res) {\n        // reset state and close modal\n        _this.setState(_objectSpread({}, _this.initialState));\n\n        _this.props.closeModal();\n\n        toast.warn(\"☠️ Account deleted!\");\n      }).catch(function (err) {\n        _this.setState({\n          isWaitingApi: false\n        });\n\n        if (err.response) {\n          var errorRes = err.response.data.error;\n          console.log(errorRes);\n          if (errorRes.name === USER_ERRORS.UserNotFound) _this.setState(_defineProperty({}, EMAIL_ERROR, \"Cannot find account with this email\"));\n        } else {\n          // network error\n          console.log(err);\n          toast.warn(\"😱 Connection to server failed\");\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ResetForm, [{\n    key: \"render\",\n    value: function render() {\n      var emailValue = this.state[EMAIL],\n          emailError = this.state[EMAIL_ERROR],\n          isWaitingApi = this.state.isWaitingApi;\n      return React.createElement(\"form\", {\n        className: \"cd-signin-modal__form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\",\n        htmlFor: \"reset-email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"E-mail\"), React.createElement(\"input\", {\n        id: \"reset-email\",\n        type: \"email\",\n        placeholder: \"E-mail\",\n        name: EMAIL,\n        value: emailValue,\n        onChange: this.handleInputValueChange,\n        className: this.toggleInputClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, emailError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding\",\n        type: \"submit\",\n        disabled: isWaitingApi // origin: value=\"Reset password\"\n        ,\n        value: isWaitingApi ? \"Waiting response...\" : \"Reset account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ResetForm;\n}(Component);\n\nResetForm.propTypes = {\n  closeModal: PropTypes.func\n};\nexport default ResetForm;","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/TopBar/ResetForm.js"],"names":["React","Component","PropTypes","axios","toast","classTogglerBuilder","userFormInputValidators","EMAIL","EMAIL_ERROR","USER_API_ROUTE","USER_ERRORS","ResetForm","initialState","state","handleInputValueChange","event","target","value","name","err","setState","toggleInputClassBy","toggleSpanClassBy","handleSubmit","preventDefault","emailInput","isWaitingApi","delete","data","email","then","res","props","closeModal","warn","catch","response","errorRes","error","console","log","UserNotFound","emailValue","emailError","propTypes","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport {\n    EMAIL,\n    EMAIL_ERROR,\n    USER_API_ROUTE,\n    USER_ERRORS\n} from \"../../constants\";\n\nimport \"../../styles/UserForm.css\";\n\nclass ResetForm extends Component {\n    static propTypes = {\n        closeModal: PropTypes.func\n    };\n\n    initialState = {\n        [EMAIL]: \"\",\n        [EMAIL_ERROR]: \"\",\n        isWaitingApi: false\n    };\n\n    state = { ...this.initialState };\n\n    handleInputValueChange = event => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        // validate input and get error object\n        const err = userFormInputValidators[name](value);\n        this.setState({\n            ...err,\n            [name]: value\n        });\n    };\n\n    toggleInputClassBy = classTogglerBuilder(\n        \"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\",\n        \"cd-signin-modal__input--has-error\"\n    );\n\n    toggleSpanClassBy = classTogglerBuilder(\n        \"cd-signin-modal__error\",\n        \"cd-signin-modal__error--is-visible\"\n    );\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // check if required field is empty\n        const emailInput = this.state[EMAIL];\n        if (!emailInput) {\n            return this.setState({\n                [EMAIL_ERROR]: \"This field is required\"\n            });\n        }\n        // set state to indicate waiting api response\n        this.setState({ isWaitingApi: true });\n        // make a request to api\n        axios\n            .delete(`${USER_API_ROUTE}`, { data: { email: emailInput } })\n            .then(res => {\n                // reset state and close modal\n                this.setState({ ...this.initialState });\n                this.props.closeModal();\n                toast.warn(\"☠️ Account deleted!\");\n            })\n            .catch(err => {\n                this.setState({ isWaitingApi: false });\n                if (err.response) {\n                    const errorRes = err.response.data.error;\n                    console.log(errorRes);\n                    if (errorRes.name === USER_ERRORS.UserNotFound)\n                        this.setState({\n                            [EMAIL_ERROR]: \"Cannot find account with this email\"\n                        });\n                } else {\n                    // network error\n                    console.log(err);\n                    toast.warn(\"😱 Connection to server failed\");\n                }\n            });\n    };\n\n    render() {\n        const emailValue = this.state[EMAIL],\n            emailError = this.state[EMAIL_ERROR],\n            isWaitingApi = this.state.isWaitingApi;\n        return (\n            <form\n                className=\"cd-signin-modal__form\"\n                onSubmit={this.handleSubmit}\n            >\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\"\n                        htmlFor=\"reset-email\"\n                    >\n                        E-mail\n                    </label>\n                    <input\n                        id=\"reset-email\"\n                        type=\"email\"\n                        placeholder=\"E-mail\"\n                        name={EMAIL}\n                        value={emailValue}\n                        onChange={this.handleInputValueChange}\n                        className={this.toggleInputClassBy(emailError)}\n                    />\n                    <span className={this.toggleSpanClassBy(emailError)}>\n                        {emailError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <input\n                        className=\"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding\"\n                        type=\"submit\"\n                        disabled={isWaitingApi}\n                        // origin: value=\"Reset password\"\n                        value={\n                            isWaitingApi\n                                ? \"Waiting response...\"\n                                : \"Reset account\"\n                        }\n                    />\n                </p>\n            </form>\n        );\n    }\n}\n\nexport default ResetForm;\n"]},"metadata":{},"sourceType":"module"}