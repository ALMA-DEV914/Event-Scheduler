{"ast":null,"code":"import _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/Schedule/EventModal.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport EventFormEditMode from \"./EventFormEditMode.js\";\nimport EventFormViewMode from \"./EventFormViewMode.js\";\nimport \"../../styles/EventModal.css\"; // login modal root in index.html\n\nvar eventModalRoot = document.getElementById(\"event-modal-root\"); // ESC key code\n\nvar ESC_KEY = 27;\n\nvar EventModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventModal, _Component);\n\n  function EventModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EventModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EventModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.escKeyDownHandler = function (event) {\n      event.stopPropagation();\n\n      if (_this.props.isModalOpen && event.keyCode === ESC_KEY) {\n        _this.props.closeModal();\n      }\n    };\n\n    _this.setViewMode = function () {\n      _this.props.setIsEditMode(false);\n    };\n\n    _this.setEditMode = function () {\n      _this.props.setIsEditMode(true);\n    };\n\n    _this.handleCloseModal = function (event) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      _this.props.closeModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(EventModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // add event listener for esc key down\n      document.addEventListener(\"keydown\", this.escKeyDownHandler);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          isModalOpen = _this$props.isModalOpen,\n          eventToShow = _this$props.eventToShow; // add class to selected event when modal opening\n      // this makes selected event block hidden on desktop\n\n      if (!prevProps.isModalOpen && isModalOpen && eventToShow) {\n        document.getElementById(eventToShow.eventId).classList.add(\"selected-event\");\n      } // remove class to selected event when modal closing\n\n\n      if (prevProps.isModalOpen && !isModalOpen && prevProps.eventToShow) {\n        var lastOpenEventId = prevProps.eventToShow.eventId;\n        var eventBlockDOM = document.getElementById(lastOpenEventId); // event may be deleted\n\n        if (eventBlockDOM) eventBlockDOM.classList.remove(\"selected-event\");\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // remove event listener\n      document.removeEventListener(\"keydown\", this.escKeyDownHandler);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isModalOpen = _this$props2.isModalOpen,\n          isEditMode = _this$props2.isEditMode,\n          eventToShow = _this$props2.eventToShow;\n      return ReactDOM.createPortal(React.createElement(\"div\", {\n        className: isModalOpen ? \"event-modal modal-is-visible\" : \"event-modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cover-layer\",\n        onClick: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"event-form_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, isEditMode ? React.createElement(EventFormEditMode, {\n        event: eventToShow,\n        setViewMode: this.setViewMode,\n        handleCloseModal: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }) : React.createElement(EventFormViewMode, {\n        event: eventToShow,\n        setEditMode: this.setEditMode,\n        handleCloseModal: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }))), eventModalRoot);\n    }\n  }]);\n\n  return EventModal;\n}(Component);\n\nEventModal.propTypes = {\n  isEditMode: PropTypes.bool,\n  eventToShow: PropTypes.object,\n  closeModal: PropTypes.func.isRequired,\n  isModalOpen: PropTypes.bool.isRequired,\n  setIsEditMode: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(EventModal);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/Schedule/EventModal.js"],"names":["React","Component","ReactDOM","PropTypes","connect","EventFormEditMode","EventFormViewMode","eventModalRoot","document","getElementById","ESC_KEY","EventModal","escKeyDownHandler","event","stopPropagation","props","isModalOpen","keyCode","closeModal","setViewMode","setIsEditMode","setEditMode","handleCloseModal","preventDefault","addEventListener","prevProps","eventToShow","eventId","classList","add","lastOpenEventId","eventBlockDOM","remove","removeEventListener","isEditMode","createPortal","propTypes","bool","object","func","isRequired","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport EventFormEditMode from \"./EventFormEditMode.js\";\nimport EventFormViewMode from \"./EventFormViewMode.js\";\n\nimport \"../../styles/EventModal.css\";\n\n// login modal root in index.html\nconst eventModalRoot = document.getElementById(\"event-modal-root\");\n\n// ESC key code\nconst ESC_KEY = 27;\n\nclass EventModal extends Component {\n    static propTypes = {\n        isEditMode: PropTypes.bool,\n        eventToShow: PropTypes.object,\n        closeModal: PropTypes.func.isRequired,\n        isModalOpen: PropTypes.bool.isRequired,\n        setIsEditMode: PropTypes.func.isRequired\n    };\n\n    escKeyDownHandler = event => {\n        event.stopPropagation();\n        if (this.props.isModalOpen && event.keyCode === ESC_KEY) {\n            this.props.closeModal();\n        }\n    };\n\n    componentDidMount() {\n        // add event listener for esc key down\n        document.addEventListener(\"keydown\", this.escKeyDownHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { isModalOpen, eventToShow } = this.props;\n        // add class to selected event when modal opening\n        // this makes selected event block hidden on desktop\n        if (!prevProps.isModalOpen && isModalOpen && eventToShow) {\n            document\n                .getElementById(eventToShow.eventId)\n                .classList.add(\"selected-event\");\n        }\n\n        // remove class to selected event when modal closing\n        if (prevProps.isModalOpen && !isModalOpen && prevProps.eventToShow) {\n            const lastOpenEventId = prevProps.eventToShow.eventId;\n            const eventBlockDOM = document.getElementById(lastOpenEventId);\n            // event may be deleted\n            if (eventBlockDOM) eventBlockDOM.classList.remove(\"selected-event\");\n        }\n    }\n\n    componentWillUnmount() {\n        // remove event listener\n        document.removeEventListener(\"keydown\", this.escKeyDownHandler);\n    }\n\n    setViewMode = () => {\n        this.props.setIsEditMode(false);\n    };\n\n    setEditMode = () => {\n        this.props.setIsEditMode(true);\n    };\n\n    handleCloseModal = event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.props.closeModal();\n    };\n\n    render() {\n        const { isModalOpen, isEditMode, eventToShow } = this.props;\n\n        return ReactDOM.createPortal(\n            <div\n                className={\n                    isModalOpen ? \"event-modal modal-is-visible\" : \"event-modal\"\n                }\n            >\n                <div className=\"cover-layer\" onClick={this.handleCloseModal} />\n                <div className=\"event-form_container\">\n                    {isEditMode ? (\n                        <EventFormEditMode\n                            event={eventToShow}\n                            setViewMode={this.setViewMode}\n                            handleCloseModal={this.handleCloseModal}\n                        />\n                    ) : (\n                        <EventFormViewMode\n                            event={eventToShow}\n                            setEditMode={this.setEditMode}\n                            handleCloseModal={this.handleCloseModal}\n                        />\n                    )}\n                </div>\n            </div>,\n            eventModalRoot\n        );\n    }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EventModal);\n"]},"metadata":{},"sourceType":"module"}