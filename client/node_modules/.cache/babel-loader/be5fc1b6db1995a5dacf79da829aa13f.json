{"ast":null,"code":"import _objectSpread from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/TopBar/SignupForm.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport { connect } from \"react-redux\";\nimport { signUserIn } from \"../../actions/userActions.js\";\nimport { USERNAME, USERNAME_ERROR, EMAIL, EMAIL_ERROR, PASSWORD, PASSWORD_ERROR, USER_ERRORS } from \"../../constants\";\nimport \"../../styles/UserForm.css\";\nvar terms = \"Terms: Your data won't be permanently preserved in the database since this is a demo website, the database periodically cleans up each week. You may want to signup again after that.\";\nvar termsCloseDelayOnHover = 200;\nvar termsNoticeCloseDelay = 1000;\n\nvar SignupForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SignupForm, _Component);\n\n  function SignupForm() {\n    var _getPrototypeOf2, _this$initialState;\n\n    var _this;\n\n    _classCallCheck(this, SignupForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SignupForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.initialState = (_this$initialState = {\n      isPasswordHidden: true,\n      isTermsShown: false\n    }, _defineProperty(_this$initialState, USERNAME, \"\"), _defineProperty(_this$initialState, USERNAME_ERROR, \"\"), _defineProperty(_this$initialState, EMAIL, \"\"), _defineProperty(_this$initialState, EMAIL_ERROR, \"\"), _defineProperty(_this$initialState, PASSWORD, \"\"), _defineProperty(_this$initialState, PASSWORD_ERROR, \"\"), _defineProperty(_this$initialState, \"isWaitingApi\", false), _this$initialState);\n    _this.state = _objectSpread({}, _this.initialState);\n\n    _this.handleInputValueChange = function (event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name; // validate input and get error object\n\n      var err = userFormInputValidators[name](value);\n\n      _this.setState(_objectSpread({}, err, _defineProperty({}, name, value)));\n    };\n\n    _this.toggleHidePassword = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      _this.setState(function (prevState) {\n        return {\n          isPasswordHidden: !prevState.isPasswordHidden\n        };\n      });\n    };\n\n    _this.toggleInputClassBy = classTogglerBuilder(\"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\", \"cd-signin-modal__input--has-error\");\n    _this.toggleSpanClassBy = classTogglerBuilder(\"cd-signin-modal__error\", \"cd-signin-modal__error--is-visible\");\n    _this.toggleTermsDetailsClassBy = classTogglerBuilder(\"signup-form-terms-detail\", \"signup-form-terms-detail--is-visible\");\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault(); // check if required field is empty\n\n      var fields = [USERNAME, EMAIL, PASSWORD];\n      var errorFields = [USERNAME_ERROR, EMAIL_ERROR, PASSWORD_ERROR];\n      var newUser = {};\n\n      for (var i = 0; i < fields.length; i++) {\n        var input = _this.state[fields[i]];\n\n        if (!input) {\n          return _this.setState(_defineProperty({}, errorFields[i], \"This field is required\"));\n        }\n\n        newUser[fields[i]] = input;\n      } // check box\n\n\n      if (!_this.checkBox.checked) {\n        _this.setState({\n          isTermsShown: true\n        });\n\n        return setTimeout(function () {\n          _this.setState({\n            isTermsShown: false\n          });\n        }, termsNoticeCloseDelay);\n      } // set state to indicate waiting api response\n\n\n      _this.setState({\n        isWaitingApi: true\n      }); // make a request to api\n\n\n      axios.post(\"/signup\", newUser).then(function (res) {\n        // reset state then close modal\n        _this.setState(_objectSpread({}, _this.initialState));\n\n        _this.props.closeModal();\n\n        toast.info(\"ðŸŽ‰ You are logged in!\"); // dispatch signin action, remember user by default\n\n        _this.props.signUserIn(res.data.data, true);\n      }).catch(function (err) {\n        _this.setState({\n          isWaitingApi: false\n        });\n\n        if (err.response) {\n          var errorRes = err.response.data.error;\n          console.log(errorRes);\n\n          if (errorRes.name === USER_ERRORS.EmailRegistered) {\n            _this.setState(_defineProperty({}, EMAIL_ERROR, \"This email has been registered, use a different email address\"));\n          }\n        } else {\n          // network error\n          console.log(err);\n          toast.warn(\"ðŸ˜± Connection to server failed\");\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SignupForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var usernameValue = this.state[USERNAME],\n          usernameError = this.state[USERNAME_ERROR],\n          emailValue = this.state[EMAIL],\n          emailError = this.state[EMAIL_ERROR],\n          passwordValue = this.state[PASSWORD],\n          passwordError = this.state[PASSWORD_ERROR];\n      var _this$state = this.state,\n          isPasswordHidden = _this$state.isPasswordHidden,\n          isWaitingApi = _this$state.isWaitingApi;\n      return React.createElement(\"form\", {\n        className: \"cd-signin-modal__form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--username cd-signin-modal__label--image-replace\",\n        htmlFor: \"signup-username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Username\"), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        name: USERNAME,\n        value: usernameValue,\n        onChange: this.handleInputValueChange,\n        className: this.toggleInputClassBy(usernameError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(usernameError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, usernameError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\",\n        htmlFor: \"signup-email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"E-mail\"), React.createElement(\"input\", {\n        id: \"signup-email\",\n        type: \"email\",\n        placeholder: \"E-mail\",\n        name: EMAIL,\n        value: emailValue,\n        onChange: this.handleInputValueChange,\n        className: this.toggleInputClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, emailError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--password cd-signin-modal__label--image-replace\",\n        htmlFor: \"signup-password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Password\"), React.createElement(\"input\", {\n        id: \"signup-password\",\n        placeholder: \"Password\",\n        name: PASSWORD,\n        value: passwordValue,\n        onChange: this.handleInputValueChange,\n        type: isPasswordHidden ? \"password\" : \"text\",\n        className: this.toggleInputClassBy(passwordError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"#0\",\n        className: \"cd-signin-modal__hide-password js-hide-password\",\n        onClick: this.toggleHidePassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, isPasswordHidden ? \"Show\" : \"Hide\"), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(passwordError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, passwordError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"accept-terms\",\n        className: \"cd-signin-modal__input\",\n        ref: function ref(ele) {\n          return _this2.checkBox = ele;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"accept-terms\",\n        className: \"checkBox-label\",\n        ref: function ref(ele) {\n          return _this2.lable = ele;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"I agree to the\", \" \", React.createElement(\"span\", {\n        className: \"signup-form-terms\",\n        onMouseOver: function onMouseOver() {\n          _this2.setState({\n            isTermsShown: true\n          });\n        },\n        onMouseOut: function onMouseOut() {\n          setTimeout(function () {\n            _this2.setState({\n              isTermsShown: false\n            });\n          }, termsCloseDelayOnHover);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Terms\")), React.createElement(\"span\", {\n        className: this.toggleTermsDetailsClassBy(this.state.isTermsShown),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, terms)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding\",\n        type: \"submit\",\n        disabled: isWaitingApi,\n        value: this.state.isWaitingApi ? \"Waiting response...\" : \"Create account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SignupForm;\n}(Component);\n\nSignupForm.propTypes = {\n  closeModal: PropTypes.func,\n  signUserIn: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = {\n  signUserIn: signUserIn\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupForm);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/TopBar/SignupForm.js"],"names":["React","Component","PropTypes","axios","toast","classTogglerBuilder","userFormInputValidators","connect","signUserIn","USERNAME","USERNAME_ERROR","EMAIL","EMAIL_ERROR","PASSWORD","PASSWORD_ERROR","USER_ERRORS","terms","termsCloseDelayOnHover","termsNoticeCloseDelay","SignupForm","initialState","isPasswordHidden","isTermsShown","state","handleInputValueChange","event","target","value","name","err","setState","toggleHidePassword","preventDefault","stopPropagation","prevState","toggleInputClassBy","toggleSpanClassBy","toggleTermsDetailsClassBy","handleSubmit","fields","errorFields","newUser","i","length","input","checkBox","checked","setTimeout","isWaitingApi","post","then","res","props","closeModal","info","data","catch","response","errorRes","error","console","log","EmailRegistered","warn","usernameValue","usernameError","emailValue","emailError","passwordValue","passwordError","ele","lable","propTypes","func","isRequired","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport { connect } from \"react-redux\";\nimport { signUserIn } from \"../../actions/userActions.js\";\nimport {\n    USERNAME,\n    USERNAME_ERROR,\n    EMAIL,\n    EMAIL_ERROR,\n    PASSWORD,\n    PASSWORD_ERROR,\n    USER_ERRORS\n} from \"../../constants\";\n\nimport \"../../styles/UserForm.css\";\n\nconst terms =\n    \"Terms: Your data won't be permanently preserved in the database since this is a demo website, the database periodically cleans up each week. You may want to signup again after that.\";\n\nconst termsCloseDelayOnHover = 200;\nconst termsNoticeCloseDelay = 1000;\n\nclass SignupForm extends Component {\n    static propTypes = {\n        closeModal: PropTypes.func,\n        signUserIn: PropTypes.func.isRequired\n    };\n\n    initialState = {\n        isPasswordHidden: true,\n        isTermsShown: false,\n        [USERNAME]: \"\",\n        [USERNAME_ERROR]: \"\",\n        [EMAIL]: \"\",\n        [EMAIL_ERROR]: \"\",\n        [PASSWORD]: \"\",\n        [PASSWORD_ERROR]: \"\",\n        isWaitingApi: false\n    };\n\n    state = { ...this.initialState };\n\n    handleInputValueChange = event => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        // validate input and get error object\n        const err = userFormInputValidators[name](value);\n        this.setState({\n            ...err,\n            [name]: value\n        });\n    };\n\n    toggleHidePassword = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState(prevState => ({\n            isPasswordHidden: !prevState.isPasswordHidden\n        }));\n    };\n\n    toggleInputClassBy = classTogglerBuilder(\n        \"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\",\n        \"cd-signin-modal__input--has-error\"\n    );\n\n    toggleSpanClassBy = classTogglerBuilder(\n        \"cd-signin-modal__error\",\n        \"cd-signin-modal__error--is-visible\"\n    );\n\n    toggleTermsDetailsClassBy = classTogglerBuilder(\n        \"signup-form-terms-detail\",\n        \"signup-form-terms-detail--is-visible\"\n    );\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // check if required field is empty\n        const fields = [USERNAME, EMAIL, PASSWORD];\n        const errorFields = [USERNAME_ERROR, EMAIL_ERROR, PASSWORD_ERROR];\n        const newUser = {};\n        for (let i = 0; i < fields.length; i++) {\n            let input = this.state[fields[i]];\n            if (!input) {\n                return this.setState({\n                    [errorFields[i]]: \"This field is required\"\n                });\n            }\n            newUser[fields[i]] = input;\n        }\n        // check box\n        if (!this.checkBox.checked) {\n            this.setState({ isTermsShown: true });\n            return setTimeout(() => {\n                this.setState({ isTermsShown: false });\n            }, termsNoticeCloseDelay);\n        }\n        // set state to indicate waiting api response\n        this.setState({ isWaitingApi: true });\n        // make a request to api\n        axios\n            .post(\"/signup\", newUser)\n            .then(res => {\n                // reset state then close modal\n                this.setState({ ...this.initialState });\n                this.props.closeModal();\n                toast.info(\"ðŸŽ‰ You are logged in!\");\n                // dispatch signin action, remember user by default\n                this.props.signUserIn(res.data.data, true);\n            })\n            .catch(err => {\n                this.setState({ isWaitingApi: false });\n                if (err.response) {\n                    const errorRes = err.response.data.error;\n                    console.log(errorRes);\n                    if (errorRes.name === USER_ERRORS.EmailRegistered) {\n                        this.setState({\n                            [EMAIL_ERROR]:\n                                \"This email has been registered, use a different email address\"\n                        });\n                    }\n                } else {\n                    // network error\n                    console.log(err);\n                    toast.warn(\"ðŸ˜± Connection to server failed\");\n                }\n            });\n    };\n\n    render() {\n        const usernameValue = this.state[USERNAME],\n            usernameError = this.state[USERNAME_ERROR],\n            emailValue = this.state[EMAIL],\n            emailError = this.state[EMAIL_ERROR],\n            passwordValue = this.state[PASSWORD],\n            passwordError = this.state[PASSWORD_ERROR];\n        const { isPasswordHidden, isWaitingApi } = this.state;\n        return (\n            <form\n                className=\"cd-signin-modal__form\"\n                onSubmit={this.handleSubmit}\n            >\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--username cd-signin-modal__label--image-replace\"\n                        htmlFor=\"signup-username\"\n                    >\n                        Username\n                    </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        name={USERNAME}\n                        value={usernameValue}\n                        onChange={this.handleInputValueChange}\n                        className={this.toggleInputClassBy(usernameError)}\n                    />\n                    <span className={this.toggleSpanClassBy(usernameError)}>\n                        {usernameError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\"\n                        htmlFor=\"signup-email\"\n                    >\n                        E-mail\n                    </label>\n                    <input\n                        id=\"signup-email\"\n                        type=\"email\"\n                        placeholder=\"E-mail\"\n                        name={EMAIL}\n                        value={emailValue}\n                        onChange={this.handleInputValueChange}\n                        className={this.toggleInputClassBy(emailError)}\n                    />\n                    <span className={this.toggleSpanClassBy(emailError)}>\n                        {emailError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--password cd-signin-modal__label--image-replace\"\n                        htmlFor=\"signup-password\"\n                    >\n                        Password\n                    </label>\n                    <input\n                        id=\"signup-password\"\n                        placeholder=\"Password\"\n                        name={PASSWORD}\n                        value={passwordValue}\n                        onChange={this.handleInputValueChange}\n                        type={isPasswordHidden ? \"password\" : \"text\"}\n                        className={this.toggleInputClassBy(passwordError)}\n                    />\n                    <a\n                        href=\"#0\"\n                        className=\"cd-signin-modal__hide-password js-hide-password\"\n                        onClick={this.toggleHidePassword}\n                    >\n                        {isPasswordHidden ? \"Show\" : \"Hide\"}\n                    </a>\n                    <span className={this.toggleSpanClassBy(passwordError)}>\n                        {passwordError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"accept-terms\"\n                        className=\"cd-signin-modal__input\"\n                        ref={ele => (this.checkBox = ele)}\n                    />\n                    <label\n                        htmlFor=\"accept-terms\"\n                        className=\"checkBox-label\"\n                        ref={ele => (this.lable = ele)}\n                    >\n                        I agree to the{\" \"}\n                        <span\n                            className=\"signup-form-terms\"\n                            onMouseOver={() => {\n                                this.setState({ isTermsShown: true });\n                            }}\n                            onMouseOut={() => {\n                                setTimeout(() => {\n                                    this.setState({ isTermsShown: false });\n                                }, termsCloseDelayOnHover);\n                            }}\n                        >\n                            Terms\n                        </span>\n                    </label>\n                    <span\n                        className={this.toggleTermsDetailsClassBy(\n                            this.state.isTermsShown\n                        )}\n                    >\n                        {terms}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <input\n                        className=\"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding\"\n                        type=\"submit\"\n                        disabled={isWaitingApi}\n                        value={\n                            this.state.isWaitingApi\n                                ? \"Waiting response...\"\n                                : \"Create account\"\n                        }\n                    />\n                </p>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = { signUserIn };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SignupForm);\n"]},"metadata":{},"sourceType":"module"}