{"ast":null,"code":"var _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/Schedule/SingleEvent.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toTimeString } from \"../../utils/timeConverters.js\";\nimport { toHexColor } from \"../../utils/colorConverters.js\";\nimport { EVENT_SLOT_HEIGHT, TIMELINE_UNIT_DURATION, MIN_DURATION_TO_RENDER_TIME, MIN_DURATION_TO_RENDER_TITLE } from \"../../constants\";\nimport \"../../styles/SingleEvent.css\";\n\nfunction SingleEvent(props) {\n  var event = props.event,\n      timelineFrom = props.timelineFrom,\n      isOnDesktop = props.isOnDesktop,\n      openModal = props.openModal;\n  var eventId = event.eventId,\n      title = event.title,\n      color = event.color,\n      startAt = event.startAt,\n      endAt = event.endAt; // set event block's color\n\n  var liStyle = {\n    backgroundColor: toHexColor(color)\n  };\n  var ifToRenderTime = true,\n      ifToRenderTitle = true;\n  var aStyle = null,\n      emStyle = null;\n\n  if (isOnDesktop) {\n    // event duration, used to determine if to render event time and title\n    var duration = endAt - startAt; // place event on a proper position of grid when render on desktop\n\n    var eventTop = EVENT_SLOT_HEIGHT * (startAt - timelineFrom) / TIMELINE_UNIT_DURATION;\n    var eventHeight = EVENT_SLOT_HEIGHT * duration / TIMELINE_UNIT_DURATION; // set top and height for event block\n\n    liStyle.top = \"\".concat(eventTop - 1, \"px\");\n    liStyle.height = \"\".concat(eventHeight + 1, \"px\"); // decide if to render time and title\n\n    ifToRenderTime = duration >= MIN_DURATION_TO_RENDER_TIME;\n    ifToRenderTitle = duration >= MIN_DURATION_TO_RENDER_TITLE; // do a little extra CSS work when only render event title:\n    //     vertical center event title in event block!\n\n    if (!ifToRenderTime && ifToRenderTitle) {\n      emStyle = {\n        lineHeight: liStyle.height\n      };\n      aStyle = {\n        paddingTop: \"0em\",\n        paddingBottom: \"0em\"\n      };\n    }\n  }\n\n  return React.createElement(\"li\", {\n    id: eventId,\n    className: \"single-event\",\n    style: liStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"#0\",\n    onClick: openModal,\n    style: aStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, ifToRenderTime && React.createElement(\"span\", {\n    className: \"event-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"\".concat(toTimeString(startAt), \" - \").concat(toTimeString(endAt))), ifToRenderTitle && React.createElement(\"em\", {\n    className: \"event-name\",\n    style: emStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, title)));\n}\n\nSingleEvent.propTypes = {\n  event: PropTypes.object.isRequired,\n  openModal: PropTypes.func.isRequired,\n  timelineFrom: PropTypes.number.isRequired,\n  isOnDesktop: PropTypes.bool\n};\nexport default SingleEvent;","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/Schedule/SingleEvent.js"],"names":["React","PropTypes","toTimeString","toHexColor","EVENT_SLOT_HEIGHT","TIMELINE_UNIT_DURATION","MIN_DURATION_TO_RENDER_TIME","MIN_DURATION_TO_RENDER_TITLE","SingleEvent","props","event","timelineFrom","isOnDesktop","openModal","eventId","title","color","startAt","endAt","liStyle","backgroundColor","ifToRenderTime","ifToRenderTitle","aStyle","emStyle","duration","eventTop","eventHeight","top","height","lineHeight","paddingTop","paddingBottom","propTypes","object","isRequired","func","number","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toTimeString } from \"../../utils/timeConverters.js\";\nimport { toHexColor } from \"../../utils/colorConverters.js\";\nimport {\n    EVENT_SLOT_HEIGHT,\n    TIMELINE_UNIT_DURATION,\n    MIN_DURATION_TO_RENDER_TIME,\n    MIN_DURATION_TO_RENDER_TITLE\n} from \"../../constants\";\n\nimport \"../../styles/SingleEvent.css\";\n\nfunction SingleEvent(props) {\n    const { event, timelineFrom, isOnDesktop, openModal } = props;\n    const { eventId, title, color, startAt, endAt } = event;\n\n    // set event block's color\n    const liStyle = { backgroundColor: toHexColor(color) };\n\n    let ifToRenderTime = true,\n        ifToRenderTitle = true;\n    let aStyle = null,\n        emStyle = null;\n    if (isOnDesktop) {\n        // event duration, used to determine if to render event time and title\n        const duration = endAt - startAt;\n        // place event on a proper position of grid when render on desktop\n        const eventTop =\n            (EVENT_SLOT_HEIGHT * (startAt - timelineFrom)) /\n            TIMELINE_UNIT_DURATION;\n        const eventHeight =\n            (EVENT_SLOT_HEIGHT * duration) / TIMELINE_UNIT_DURATION;\n\n        // set top and height for event block\n        liStyle.top = `${eventTop - 1}px`;\n        liStyle.height = `${eventHeight + 1}px`;\n\n        // decide if to render time and title\n        ifToRenderTime = duration >= MIN_DURATION_TO_RENDER_TIME;\n        ifToRenderTitle = duration >= MIN_DURATION_TO_RENDER_TITLE;\n\n        // do a little extra CSS work when only render event title:\n        //     vertical center event title in event block!\n        if (!ifToRenderTime && ifToRenderTitle) {\n            emStyle = { lineHeight: liStyle.height };\n            aStyle = {\n                paddingTop: \"0em\",\n                paddingBottom: \"0em\"\n            };\n        }\n    }\n\n    return (\n        <li id={eventId} className=\"single-event\" style={liStyle}>\n            <a href=\"#0\" onClick={openModal} style={aStyle}>\n                {ifToRenderTime && (\n                    <span className=\"event-date\">\n                        {`${toTimeString(startAt)} - ${toTimeString(endAt)}`}\n                    </span>\n                )}\n                {ifToRenderTitle && (\n                    <em className=\"event-name\" style={emStyle}>\n                        {title}\n                    </em>\n                )}\n            </a>\n        </li>\n    );\n}\n\nSingleEvent.propTypes = {\n    event: PropTypes.object.isRequired,\n    openModal: PropTypes.func.isRequired,\n    timelineFrom: PropTypes.number.isRequired,\n    isOnDesktop: PropTypes.bool\n};\n\nexport default SingleEvent;\n"]},"metadata":{},"sourceType":"module"}