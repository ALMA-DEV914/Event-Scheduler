{"ast":null,"code":"import _defineProperty from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/Schedule/EventFormEditMode.js\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { TwitterPicker } from \"react-color\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { toHexColor, toDecimal } from \"../../utils/colorConverters.js\";\nimport { toTimeString, toNumOfMinutes } from \"../../utils/timeConverters.js\";\nimport { addEvent, updateEvent, setError } from \"../../actions/eventActions.js\";\nimport { WEEK_DAYS, DEFAULT_EVENT, COLOR_CHOICES, EVENT_API_ROUTE } from \"../../constants\";\nimport \"../../styles/EventForm.css\"; // styled Button component\n\nvar StyledButton = withStyles({\n  root: {\n    marginLeft: 13\n  },\n  label: {\n    fontSize: 13\n  }\n})(Button); // helper function for generating custom TextField component\n\nvar customTextField = function customTextField(color) {\n  return withStyles(function (theme) {\n    return {\n      underline: {\n        \"&:before\": {\n          borderBottomColor: color\n        },\n        \"&:after\": {\n          borderBottomColor: color\n        }\n      },\n      input: {\n        color: color,\n        lineHeight: \"1.1875em\",\n        fontFamily: \"PT Sans\",\n        fontSize: \"1.6rem\"\n      },\n      label: {\n        color: color,\n        fontFamily: \"PT Sans\",\n        fontSize: \"1.6rem\",\n        \"&$labelFocused\": {\n          color: color\n        }\n      },\n      labelFocused: {},\n      helperText: {\n        color: color,\n        fontFamily: \"PT Sans\",\n        fontSize: \"1.1rem\"\n      }\n    };\n  })(function (props) {\n    var classes = props.classes,\n        otherProps = _objectWithoutProperties(props, [\"classes\"]);\n\n    return React.createElement(TextField, Object.assign({}, otherProps, {\n      InputProps: {\n        classes: {\n          underline: classes.underline,\n          input: classes.input\n        }\n      },\n      InputLabelProps: {\n        classes: {\n          root: classes.label,\n          focused: classes.labelFocused\n        }\n      },\n      FormHelperTextProps: {\n        classes: {\n          root: classes.helperText\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  });\n}; // styled TextField component for header\n\n\nvar HeaderTextField = customTextField(\"white\"); // styled TextField component for body\n\nvar BodyTextField = customTextField(\"black\"); // There are two cases which triggers rendering edit mode modal:\n//     1. Adding event by clicking \"Add Event\" button on <Schedule />\n//     2. Updating event by clicking \"Edit\" button on view mode modal\n\nvar EventFormEditMode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventFormEditMode, _Component);\n\n  function EventFormEditMode(_props) {\n    var _this;\n\n    _classCallCheck(this, EventFormEditMode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventFormEditMode).call(this, _props));\n\n    _this.deriveStateFrom = function (props) {\n      var event = props.event ? props.event : DEFAULT_EVENT;\n\n      var startAt = event.startAt,\n          endAt = event.endAt,\n          color = event.color,\n          other = _objectWithoutProperties(event, [\"startAt\", \"endAt\", \"color\"]); // return an object, which should be assigned to state\n\n\n      return _objectSpread({}, other, {\n        start: toTimeString(startAt),\n        end: toTimeString(endAt),\n        headerColor: toHexColor(color),\n        isWaitingApi: false,\n        error: {}\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault(); // get values from props and state\n\n      var _this$props = _this.props,\n          events = _this$props.events,\n          setError = _this$props.setError,\n          addEvent = _this$props.addEvent,\n          updateEvent = _this$props.updateEvent,\n          isUserLoggedIn = _this$props.isUserLoggedIn,\n          handleCloseModal = _this$props.handleCloseModal;\n      var _this$state = _this.state,\n          title = _this$state.title,\n          location = _this$state.location,\n          description = _this$state.description,\n          start = _this$state.start,\n          end = _this$state.end,\n          weekday = _this$state.weekday,\n          headerColor = _this$state.headerColor; // determine if updating event or adding event\n\n      var isUpdatingEvent = _this.props.event ? true : false; // get event id, if adding new event, assign a temporary event id\n\n      var eventId = isUpdatingEvent ? _this.props.event.eventId : Date.now().toString(); // validate time interval\n\n      var startAt = toNumOfMinutes(start),\n          endAt = toNumOfMinutes(end);\n\n      if (startAt >= endAt) {\n        return _this.setState({\n          error: {\n            start: \"Invalid interval\",\n            end: \"Invalid interval\"\n          }\n        });\n      } // validate if time interval has been used by other event\n      // find events which has different id and on the same weekday\n\n\n      var arr = events.filter(function (e) {\n        return e.weekday === weekday && e.eventId !== eventId;\n      });\n\n      for (var i = 0; i < arr.length; i++) {\n        var e = arr[i];\n\n        if (!(endAt <= e.startAt || startAt >= e.endAt)) {\n          // interval overlaps with an existed event\n          return _this.setState({\n            error: {\n              start: \"Overlapping interval\",\n              end: \"Overlapping interval\"\n            }\n          });\n        }\n      } // set event data from state\n\n\n      var color = toDecimal(headerColor);\n      var data = {\n        title: title,\n        location: location,\n        description: description,\n        startAt: startAt,\n        endAt: endAt,\n        weekday: weekday,\n        color: color\n      };\n      var promise;\n      debugger; // check if user logged in, if logged in, send request to api\n\n      if (!isUserLoggedIn) {\n        // no user logged in, just do adding/updating locally\n        // set id\n        data.eventId = eventId; // pass event data to next then()\n\n        promise = Promise.resolve(data);\n      } else {\n        _this.setState({\n          isWaitingApi: true\n        }); // call api, do remote thing\n\n\n        if (isUpdatingEvent) {\n          // request updating event\n          promise = axios.patch(\"\".concat(EVENT_API_ROUTE, \"/\").concat(eventId), {\n            data: data\n          }).then(function (res) {\n            // extract 'updatedEvent' and return to next then\n            return res.data.data.updatedEvent;\n          });\n        } else {\n          // request adding new event\n          promise = axios.post(\"\".concat(EVENT_API_ROUTE), data).then(function (res) {\n            // extract 'savedEvent' and return to next then\n            return res.data.data.savedEvent;\n          });\n        }\n      } // do local thing, change events array in redux store or handle error\n\n\n      return promise.then(function (eventData) {\n        console.log(\"Event data: \", eventData); // done waiting api\n\n        _this.setState({\n          isWaitingApi: false\n        }); // add/update event locally\n\n\n        if (isUpdatingEvent) updateEvent(eventData);else addEvent(eventData); // reset form\n\n        _this.setState(_this.deriveStateFrom(_this.props)); // close modal\n\n\n        handleCloseModal(); // emit toast\n\n        var toastMsg = isUpdatingEvent ? \"‚úèÔ∏è Event updated!\" : \"üìå Event added!\";\n        toast(toastMsg);\n      }).catch(function (err) {\n        _this.setState({\n          isWaitingApi: false\n        });\n\n        if (err.response) {\n          // http error, dispatch set error action\n          var errorRes = err.response.data.error;\n          setError(errorRes); // close modal\n\n          handleCloseModal();\n        } else {\n          // local network error, just emit toast\n          toast.warn(\"üò± Connection to server failed\");\n        }\n      });\n    };\n\n    _this.handleColorChange = function (color, event) {\n      _this.setState({\n        headerColor: color.hex\n      });\n    };\n\n    _this.handleChange = function (name) {\n      return function (event) {\n        var _this$setState;\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, name, event.target.value), _defineProperty(_this$setState, \"error\", {}), _this$setState));\n      };\n    };\n\n    _this.handleDiscard = function (event) {\n      event.preventDefault();\n\n      if (!_this.props.event) {\n        // case 1, adding event, reset form to default and close modal\n        _this.setState(_this.deriveStateFrom(_this.props));\n\n        _this.props.handleCloseModal();\n      } else {\n        // case 2, updating event, back to view mode\n        _this.props.setViewMode();\n      }\n    };\n\n    _this.state = _this.deriveStateFrom(_props);\n    return _this;\n  }\n\n  _createClass(EventFormEditMode, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProp) {\n      if (prevProp.event !== this.props.event) {\n        this.setState(this.deriveStateFrom(this.props));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleCloseModal = this.props.handleCloseModal;\n      var _this$state2 = this.state,\n          title = _this$state2.title,\n          location = _this$state2.location,\n          description = _this$state2.description,\n          start = _this$state2.start,\n          end = _this$state2.end,\n          weekday = _this$state2.weekday,\n          headerColor = _this$state2.headerColor,\n          isWaitingApi = _this$state2.isWaitingApi,\n          error = _this$state2.error;\n      var headerStyle = {\n        backgroundColor: headerColor\n      };\n      return React.createElement(\"form\", {\n        className: \"event-form edit\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        style: headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(HeaderTextField, {\n        required: true,\n        id: \"title\",\n        label: \"Title\",\n        value: title,\n        onChange: this.handleChange(\"title\"),\n        margin: \"none\",\n        error: !!error.title,\n        helperText: error.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"event-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"time-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(BodyTextField, {\n        required: true,\n        type: \"time\",\n        id: \"start\",\n        label: \"Start\",\n        value: start,\n        onChange: this.handleChange(\"start\"),\n        margin: \"none\",\n        inputProps: {\n          step: 300\n        },\n        error: !!error.start,\n        helperText: error.start,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(BodyTextField, {\n        required: true,\n        type: \"time\",\n        id: \"end\",\n        label: \"End\",\n        value: end,\n        onChange: this.handleChange(\"end\"),\n        margin: \"none\",\n        inputProps: {\n          step: 300\n        },\n        error: !!error.end,\n        helperText: error.end,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }), React.createElement(BodyTextField, {\n        select: true,\n        required: true,\n        id: \"weekday\",\n        label: \"Weekday\",\n        margin: \"none\",\n        value: weekday,\n        onChange: this.handleChange(\"weekday\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, WEEK_DAYS.map(function (weekday, i) {\n        return React.createElement(MenuItem, {\n          key: i,\n          value: i,\n          style: {\n            fontSize: 14\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347\n          },\n          __self: this\n        }, weekday);\n      }))), React.createElement(\"div\", {\n        className: \"location-textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(BodyTextField, {\n        fullWidth: true,\n        id: \"location\",\n        label: \"Location\",\n        value: location,\n        onChange: this.handleChange(\"location\"),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"description-textfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(BodyTextField, {\n        multiline: true,\n        fullWidth: true,\n        id: \"description\",\n        label: \"Description\",\n        value: description,\n        onChange: this.handleChange(\"description\"),\n        rows: \"3\",\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"color-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"color-picker-indicater\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, \"Color *\"), React.createElement(TwitterPicker, {\n        triangle: \"hide\",\n        width: \"280px\",\n        color: headerColor,\n        colors: COLOR_CHOICES,\n        onChangeComplete: this.handleColorChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"buttons-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(StyledButton, {\n        onClick: this.handleDiscard,\n        disabled: isWaitingApi,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, \"Discard\"), React.createElement(StyledButton, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: isWaitingApi,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, isWaitingApi ? \"Waiting API...\" : \"Confirm\"))), React.createElement(\"a\", {\n        href: \"#0\",\n        className: \"close\",\n        onClick: handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \"Close\"));\n    }\n  }]);\n\n  return EventFormEditMode;\n}(Component);\n\nEventFormEditMode.propTypes = {\n  event: PropTypes.object,\n  events: PropTypes.array.isRequired,\n  addEvent: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired,\n  updateEvent: PropTypes.func.isRequired,\n  setViewMode: PropTypes.func.isRequired,\n  isUserLoggedIn: PropTypes.bool.isRequired,\n  handleCloseModal: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isUserLoggedIn: state.User.isUserLoggedIn,\n    events: state.Event.events\n  };\n};\n\nvar mapDispatchToProps = {\n  addEvent: addEvent,\n  updateEvent: updateEvent,\n  setError: setError\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFormEditMode);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/Schedule/EventFormEditMode.js"],"names":["axios","React","Component","PropTypes","connect","toast","TwitterPicker","Button","MenuItem","TextField","withStyles","toHexColor","toDecimal","toTimeString","toNumOfMinutes","addEvent","updateEvent","setError","WEEK_DAYS","DEFAULT_EVENT","COLOR_CHOICES","EVENT_API_ROUTE","StyledButton","root","marginLeft","label","fontSize","customTextField","color","theme","underline","borderBottomColor","input","lineHeight","fontFamily","labelFocused","helperText","props","classes","otherProps","focused","HeaderTextField","BodyTextField","EventFormEditMode","deriveStateFrom","event","startAt","endAt","other","start","end","headerColor","isWaitingApi","error","handleSubmit","preventDefault","events","isUserLoggedIn","handleCloseModal","state","title","location","description","weekday","isUpdatingEvent","eventId","Date","now","toString","setState","arr","filter","e","i","length","data","promise","Promise","resolve","patch","then","res","updatedEvent","post","savedEvent","eventData","console","log","toastMsg","catch","err","response","errorRes","warn","handleColorChange","hex","handleChange","name","target","value","handleDiscard","setViewMode","prevProp","headerStyle","backgroundColor","step","map","propTypes","object","array","isRequired","func","bool","mapStateToProps","User","Event","mapDispatchToProps"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { TwitterPicker } from \"react-color\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { toHexColor, toDecimal } from \"../../utils/colorConverters.js\";\nimport { toTimeString, toNumOfMinutes } from \"../../utils/timeConverters.js\";\nimport { addEvent, updateEvent, setError } from \"../../actions/eventActions.js\";\nimport {\n    WEEK_DAYS,\n    DEFAULT_EVENT,\n    COLOR_CHOICES,\n    EVENT_API_ROUTE\n} from \"../../constants\";\n\nimport \"../../styles/EventForm.css\";\n\n// styled Button component\nconst StyledButton = withStyles({\n    root: { marginLeft: 13 },\n    label: { fontSize: 13 }\n})(Button);\n\n// helper function for generating custom TextField component\nconst customTextField = color =>\n    withStyles(theme => ({\n        underline: {\n            \"&:before\": { borderBottomColor: color },\n            \"&:after\": { borderBottomColor: color }\n        },\n        input: {\n            color,\n            lineHeight: \"1.1875em\",\n            fontFamily: \"PT Sans\",\n            fontSize: \"1.6rem\"\n        },\n        label: {\n            color,\n            fontFamily: \"PT Sans\",\n            fontSize: \"1.6rem\",\n            \"&$labelFocused\": { color }\n        },\n        labelFocused: {},\n        helperText: {\n            color,\n            fontFamily: \"PT Sans\",\n            fontSize: \"1.1rem\"\n        }\n    }))(props => {\n        const { classes, ...otherProps } = props;\n        return (\n            <TextField\n                {...otherProps}\n                InputProps={{\n                    classes: {\n                        underline: classes.underline,\n                        input: classes.input\n                    }\n                }}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.label,\n                        focused: classes.labelFocused\n                    }\n                }}\n                FormHelperTextProps={{\n                    classes: { root: classes.helperText }\n                }}\n            />\n        );\n    });\n\n// styled TextField component for header\nconst HeaderTextField = customTextField(\"white\");\n\n// styled TextField component for body\nconst BodyTextField = customTextField(\"black\");\n\n// There are two cases which triggers rendering edit mode modal:\n//     1. Adding event by clicking \"Add Event\" button on <Schedule />\n//     2. Updating event by clicking \"Edit\" button on view mode modal\nclass EventFormEditMode extends Component {\n    static propTypes = {\n        event: PropTypes.object,\n        events: PropTypes.array.isRequired,\n        addEvent: PropTypes.func.isRequired,\n        setError: PropTypes.func.isRequired,\n        updateEvent: PropTypes.func.isRequired,\n        setViewMode: PropTypes.func.isRequired,\n        isUserLoggedIn: PropTypes.bool.isRequired,\n        handleCloseModal: PropTypes.func.isRequired\n    };\n\n    deriveStateFrom = props => {\n        const event = props.event ? props.event : DEFAULT_EVENT;\n        const { startAt, endAt, color, ...other } = event;\n        // return an object, which should be assigned to state\n        return {\n            ...other,\n            start: toTimeString(startAt),\n            end: toTimeString(endAt),\n            headerColor: toHexColor(color),\n            isWaitingApi: false,\n            error: {}\n        };\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = this.deriveStateFrom(props);\n    }\n\n    componentDidUpdate(prevProp) {\n        if (prevProp.event !== this.props.event) {\n            this.setState(this.deriveStateFrom(this.props));\n        }\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // get values from props and state\n        const {\n            events,\n            setError,\n            addEvent,\n            updateEvent,\n            isUserLoggedIn,\n            handleCloseModal\n        } = this.props;\n        const {\n            title,\n            location,\n            description,\n            start,\n            end,\n            weekday,\n            headerColor\n        } = this.state;\n        // determine if updating event or adding event\n        const isUpdatingEvent = this.props.event ? true : false;\n        // get event id, if adding new event, assign a temporary event id\n        let eventId = isUpdatingEvent\n            ? this.props.event.eventId\n            : Date.now().toString();\n\n        // validate time interval\n        const startAt = toNumOfMinutes(start),\n            endAt = toNumOfMinutes(end);\n        if (startAt >= endAt) {\n            return this.setState({\n                error: {\n                    start: \"Invalid interval\",\n                    end: \"Invalid interval\"\n                }\n            });\n        }\n        // validate if time interval has been used by other event\n        // find events which has different id and on the same weekday\n        const arr = events.filter(\n            e => e.weekday === weekday && e.eventId !== eventId\n        );\n        for (let i = 0; i < arr.length; i++) {\n            let e = arr[i];\n            if (!(endAt <= e.startAt || startAt >= e.endAt)) {\n                // interval overlaps with an existed event\n                return this.setState({\n                    error: {\n                        start: \"Overlapping interval\",\n                        end: \"Overlapping interval\"\n                    }\n                });\n            }\n        }\n\n        // set event data from state\n        const color = toDecimal(headerColor);\n        const data = {\n            title,\n            location,\n            description,\n            startAt,\n            endAt,\n            weekday,\n            color\n        };\n\n        let promise;\n        debugger;\n        // check if user logged in, if logged in, send request to api\n        if (!isUserLoggedIn) {\n            // no user logged in, just do adding/updating locally\n            // set id\n            data.eventId = eventId;\n            // pass event data to next then()\n            promise = Promise.resolve(data);\n        } else {\n            this.setState({ isWaitingApi: true });\n            // call api, do remote thing\n            if (isUpdatingEvent) {\n                // request updating event\n                promise = axios\n                    .patch(`${EVENT_API_ROUTE}/${eventId}`, {\n                        data\n                    })\n                    .then(res => {\n                        // extract 'updatedEvent' and return to next then\n                        return res.data.data.updatedEvent;\n                    });\n            } else {\n                // request adding new event\n                promise = axios.post(`${EVENT_API_ROUTE}`, data).then(res => {\n                    // extract 'savedEvent' and return to next then\n                    return res.data.data.savedEvent;\n                });\n            }\n        }\n\n        // do local thing, change events array in redux store or handle error\n        return promise\n            .then(eventData => {\n                console.log(\"Event data: \", eventData);\n                // done waiting api\n                this.setState({ isWaitingApi: false });\n                // add/update event locally\n                if (isUpdatingEvent) updateEvent(eventData);\n                else addEvent(eventData);\n                // reset form\n                this.setState(this.deriveStateFrom(this.props));\n                // close modal\n                handleCloseModal();\n                // emit toast\n                const toastMsg = isUpdatingEvent\n                    ? \"‚úèÔ∏è Event updated!\"\n                    : \"üìå Event added!\";\n                toast(toastMsg);\n            })\n            .catch(err => {\n                this.setState({ isWaitingApi: false });\n                if (err.response) {\n                    // http error, dispatch set error action\n                    const errorRes = err.response.data.error;\n                    setError(errorRes);\n                    // close modal\n                    handleCloseModal();\n                } else {\n                    // local network error, just emit toast\n                    toast.warn(\"üò± Connection to server failed\");\n                }\n            });\n    };\n\n    handleColorChange = (color, event) => {\n        this.setState({ headerColor: color.hex });\n    };\n\n    handleChange = name => event => {\n        this.setState({ [name]: event.target.value, error: {} });\n    };\n\n    handleDiscard = event => {\n        event.preventDefault();\n        if (!this.props.event) {\n            // case 1, adding event, reset form to default and close modal\n            this.setState(this.deriveStateFrom(this.props));\n            this.props.handleCloseModal();\n        } else {\n            // case 2, updating event, back to view mode\n            this.props.setViewMode();\n        }\n    };\n\n    render() {\n        const { handleCloseModal } = this.props;\n        const {\n            title,\n            location,\n            description,\n            start,\n            end,\n            weekday,\n            headerColor,\n            isWaitingApi,\n            error\n        } = this.state;\n\n        const headerStyle = { backgroundColor: headerColor };\n\n        return (\n            <form className=\"event-form edit\" onSubmit={this.handleSubmit}>\n                <div className=\"header\" style={headerStyle}>\n                    <div className=\"content\">\n                        <HeaderTextField\n                            required\n                            id=\"title\"\n                            label=\"Title\"\n                            value={title}\n                            onChange={this.handleChange(\"title\")}\n                            margin=\"none\"\n                            error={!!error.title}\n                            helperText={error.title}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"body\">\n                    <div className=\"event-info\">\n                        <div className=\"time-picker\">\n                            <BodyTextField\n                                required\n                                type=\"time\"\n                                id=\"start\"\n                                label=\"Start\"\n                                value={start}\n                                onChange={this.handleChange(\"start\")}\n                                margin=\"none\"\n                                inputProps={{ step: 300 }}\n                                error={!!error.start}\n                                helperText={error.start}\n                            />\n                            <BodyTextField\n                                required\n                                type=\"time\"\n                                id=\"end\"\n                                label=\"End\"\n                                value={end}\n                                onChange={this.handleChange(\"end\")}\n                                margin=\"none\"\n                                inputProps={{ step: 300 }}\n                                error={!!error.end}\n                                helperText={error.end}\n                            />\n                            <BodyTextField\n                                select\n                                required\n                                id=\"weekday\"\n                                label=\"Weekday\"\n                                margin=\"none\"\n                                value={weekday}\n                                onChange={this.handleChange(\"weekday\")}\n                            >\n                                {WEEK_DAYS.map((weekday, i) => (\n                                    <MenuItem\n                                        key={i}\n                                        value={i}\n                                        style={{ fontSize: 14 }}\n                                    >\n                                        {weekday}\n                                    </MenuItem>\n                                ))}\n                            </BodyTextField>\n                        </div>\n                        <div className=\"location-textfield\">\n                            <BodyTextField\n                                fullWidth\n                                id=\"location\"\n                                label=\"Location\"\n                                value={location}\n                                onChange={this.handleChange(\"location\")}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div className=\"description-textfield\">\n                            <BodyTextField\n                                multiline\n                                fullWidth\n                                id=\"description\"\n                                label=\"Description\"\n                                value={description}\n                                onChange={this.handleChange(\"description\")}\n                                rows=\"3\"\n                                margin=\"normal\"\n                            />\n                        </div>\n\n                        <div className=\"color-picker\">\n                            <span className=\"color-picker-indicater\">\n                                Color *\n                            </span>\n                            <TwitterPicker\n                                triangle={\"hide\"}\n                                width={\"280px\"}\n                                color={headerColor}\n                                colors={COLOR_CHOICES}\n                                onChangeComplete={this.handleColorChange}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"buttons-bar\">\n                        <StyledButton\n                            onClick={this.handleDiscard}\n                            disabled={isWaitingApi}\n                        >\n                            Discard\n                        </StyledButton>\n                        <StyledButton\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={isWaitingApi}\n                        >\n                            {isWaitingApi ? \"Waiting API...\" : \"Confirm\"}\n                        </StyledButton>\n                    </div>\n                </div>\n\n                <a href=\"#0\" className=\"close\" onClick={handleCloseModal}>\n                    Close\n                </a>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isUserLoggedIn: state.User.isUserLoggedIn,\n    events: state.Event.events\n});\n\nconst mapDispatchToProps = { addEvent, updateEvent, setError };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EventFormEditMode);\n"]},"metadata":{},"sourceType":"module"}