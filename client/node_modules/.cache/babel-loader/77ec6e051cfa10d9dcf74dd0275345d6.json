{"ast":null,"code":"import _defineProperty from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _userFormInputValidat;\n\nimport { USERNAME, EMAIL, PASSWORD, USERNAME_ERROR, EMAIL_ERROR, PASSWORD_ERROR } from \"../constants\"; // functions to validate various form inputs\n\n/**\n * validate if it is email\n * @param {String} email\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\n\nexport var validateEmail = function validateEmail(email) {\n  // see: https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\n  var reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return _defineProperty({}, EMAIL_ERROR, !email || reg.test(email) ? \"\" : \"Invalid email address\");\n};\n/**\n * validate if username matches requirement\n * @param {String} username\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\n\nexport var validateUsername = function validateUsername(username) {\n  // User name must be 2-12 long,\n  // no leading/ending space or \".\"\n  // const reg = /^(?=.{2,12}$)(?![.\\s])[a-zA-Z0-9._\\s]+(?<![.\\s])$/;\n  // fix \"SyntaxError: Invalid regular expression: invalid group specifier name\" on safari\n  var reg = /^[a-zA-Z0-9](_(?!(\\.|_))|\\.(?!(_|\\.))|[a-zA-Z0-9]){0,10}[a-zA-Z0-9]$/;\n  return _defineProperty({}, USERNAME_ERROR, !username || reg.test(username) ? \"\" : \"2~12 long alphabets and numbers, no leading/ending space or .\");\n};\n/**\n * validate if password matches requirement\n * @param {String} password\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\n\nexport var validatePassword = function validatePassword(password) {\n  // password must be 4-30 long, accepts digits, lower/upper case and !@#$%^&\n  var reg = /^[a-zA-Z0-9!@#$%^&]{4,30}$/;\n  return _defineProperty({}, PASSWORD_ERROR, !password || reg.test(password) ? \"\" : \"4~30 long alphabets, numbers and symbols of !@#$%^&\");\n}; // group up user form input validators ,return different validator according to target name\n\nexport var userFormInputValidators = (_userFormInputValidat = {}, _defineProperty(_userFormInputValidat, EMAIL, validateEmail), _defineProperty(_userFormInputValidat, USERNAME, validateUsername), _defineProperty(_userFormInputValidat, PASSWORD, validatePassword), _userFormInputValidat);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/utils/validators.js"],"names":["USERNAME","EMAIL","PASSWORD","USERNAME_ERROR","EMAIL_ERROR","PASSWORD_ERROR","validateEmail","email","reg","test","validateUsername","username","validatePassword","password","userFormInputValidators"],"mappings":";;;;AAAA,SACIA,QADJ,EAEIC,KAFJ,EAGIC,QAHJ,EAIIC,cAJJ,EAKIC,WALJ,EAMIC,cANJ,QAOO,cAPP,C,CASA;;AAEA;;;;;;AAKA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAClC;AACA,MAAMC,GAAG,GAAG,uJAAZ;AACA,6BACKJ,WADL,EACmB,CAACG,KAAD,IAAUC,GAAG,CAACC,IAAJ,CAASF,KAAT,CAAV,GAA4B,EAA5B,GAAiC,uBADpD;AAGH,CANM;AAQP;;;;;;AAKA,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,QAAQ,EAAI;AACxC;AACA;AAEA;AACA;AACA,MAAMH,GAAG,GAAG,sEAAZ;AACA,6BACKL,cADL,EAEQ,CAACQ,QAAD,IAAaH,GAAG,CAACC,IAAJ,CAASE,QAAT,CAAb,GACM,EADN,GAEM,+DAJd;AAMH,CAbM;AAeP;;;;;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,QAAQ,EAAI;AACxC;AACA,MAAML,GAAG,GAAG,4BAAZ;AACA,6BACKH,cADL,EAEQ,CAACQ,QAAD,IAAaL,GAAG,CAACC,IAAJ,CAASI,QAAT,CAAb,GACM,EADN,GAEM,qDAJd;AAMH,CATM,C,CAWP;;AACA,OAAO,IAAMC,uBAAuB,uEAC/Bb,KAD+B,EACvBK,aADuB,0CAE/BN,QAF+B,EAEpBU,gBAFoB,0CAG/BR,QAH+B,EAGpBU,gBAHoB,yBAA7B","sourcesContent":["import {\n    USERNAME,\n    EMAIL,\n    PASSWORD,\n    USERNAME_ERROR,\n    EMAIL_ERROR,\n    PASSWORD_ERROR\n} from \"../constants\";\n\n// functions to validate various form inputs\n\n/**\n * validate if it is email\n * @param {String} email\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\nexport const validateEmail = email => {\n    // see: https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\n    const reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return {\n        [EMAIL_ERROR]: !email || reg.test(email) ? \"\" : \"Invalid email address\"\n    };\n};\n\n/**\n * validate if username matches requirement\n * @param {String} username\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\nexport const validateUsername = username => {\n    // User name must be 2-12 long,\n    // no leading/ending space or \".\"\n\n    // const reg = /^(?=.{2,12}$)(?![.\\s])[a-zA-Z0-9._\\s]+(?<![.\\s])$/;\n    // fix \"SyntaxError: Invalid regular expression: invalid group specifier name\" on safari\n    const reg = /^[a-zA-Z0-9](_(?!(\\.|_))|\\.(?!(_|\\.))|[a-zA-Z0-9]){0,10}[a-zA-Z0-9]$/;\n    return {\n        [USERNAME_ERROR]:\n            !username || reg.test(username)\n                ? \"\"\n                : \"2~12 long alphabets and numbers, no leading/ending space or .\"\n    };\n};\n\n/**\n * validate if password matches requirement\n * @param {String} password\n * @returns {Object} Object with specific key, if input is truthy and invalid, value is truthy, otherwise value is an empty string, which is falsy.\n */\nexport const validatePassword = password => {\n    // password must be 4-30 long, accepts digits, lower/upper case and !@#$%^&\n    const reg = /^[a-zA-Z0-9!@#$%^&]{4,30}$/;\n    return {\n        [PASSWORD_ERROR]:\n            !password || reg.test(password)\n                ? \"\"\n                : \"4~30 long alphabets, numbers and symbols of !@#$%^&\"\n    };\n};\n\n// group up user form input validators ,return different validator according to target name\nexport const userFormInputValidators = {\n    [EMAIL]: validateEmail,\n    [USERNAME]: validateUsername,\n    [PASSWORD]: validatePassword\n};\n"]},"metadata":{},"sourceType":"module"}