{"ast":null,"code":"import _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/TopBar/index.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport LoginModal from \"./LoginModal.js\";\nimport { RESET_FORM, SIGNIN_FORM, SIGNUP_FORM } from \"../../constants\";\nimport { logUserOut } from \"../../actions/userActions.js\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport logo from \"../../assets/images/logo.png\";\nimport \"../../styles/TopBar.css\";\n\nvar TopBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TopBar, _Component);\n\n  function TopBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TopBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TopBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isNavListVisible: false,\n      isModalOpen: false,\n      formToOpen: SIGNIN_FORM\n    };\n\n    _this.navClickHandler = function (event) {\n      event.preventDefault();\n      event.stopPropagation(); // check event target's tagName, only set state when it's \"NAV\"\n\n      if (event.target.tagName === \"NAV\") {\n        _this.setState(function (prevState) {\n          return {\n            isNavListVisible: !prevState.isNavListVisible\n          };\n        });\n      }\n    };\n\n    _this.openModalWithForm = function (formToOpen) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n          event.stopPropagation();\n        } // make sure formToOpen is one of three pre-defined forms\n\n\n        if (formToOpen === RESET_FORM || formToOpen === SIGNIN_FORM || formToOpen === SIGNUP_FORM) _this.setState({\n          isModalOpen: true,\n          formToOpen: formToOpen\n        });else return;\n      };\n    };\n\n    _this.closeModal = function (event) {\n      if (event) event.preventDefault();\n\n      _this.setState({\n        isModalOpen: false\n      });\n    };\n\n    _this.logoutClickHandler = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      toast.info(\"ðŸ‘‹ See ya~\");\n\n      _this.props.logUserOut();\n    };\n\n    _this.toggleNavListClassBy = classTogglerBuilder(\"cd-main-nav__list\", \"cd-main-nav__list--is-visible\");\n    return _this;\n  }\n\n  _createClass(TopBar, [{\n    key: \"render\",\n    value: function render() {\n      var navListClass = this.toggleNavListClassBy(this.state.isNavListVisible);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"cd-main-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cd-main-header__logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        alt: \"Logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"header-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Event Scheduler\")), React.createElement(\"nav\", {\n        className: \"cd-main-nav\",\n        onClick: this.navClickHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: navListClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.props.isUserLoggedIn ? React.createElement(\"span\", {\n        className: \"cd-main-nav__item top-bar-nav--welcome-msg\",\n        href: \"#0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Hi there, \".concat(this.props.username)) : React.createElement(\"a\", {\n        className: \"cd-main-nav__item cd-main-nav__item--signin\",\n        href: \"#0\",\n        onClick: this.openModalWithForm(SIGNIN_FORM),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Sign in\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.props.isUserLoggedIn ? React.createElement(\"a\", {\n        className: \"cd-main-nav__item top-bar-nav__item--logout\",\n        href: \"#0\",\n        onClick: this.logoutClickHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Log out\") : React.createElement(\"a\", {\n        className: \"cd-main-nav__item cd-main-nav__item--signup\",\n        href: \"#0\",\n        onClick: this.openModalWithForm(SIGNUP_FORM),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Sign up\"))))), React.createElement(LoginModal, {\n        isModalOpen: this.state.isModalOpen,\n        formToOpen: this.state.formToOpen,\n        closeModal: this.closeModal,\n        openModalWithForm: this.openModalWithForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TopBar;\n}(Component);\n\nTopBar.propTypes = {\n  logUserOut: PropTypes.func,\n  isUserLoggedIn: PropTypes.bool,\n  username: PropTypes.string\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isUserLoggedIn: state.User.isUserLoggedIn,\n    username: state.User.username\n  };\n};\n\nexport default connect(mapStateToProps, {\n  logUserOut: logUserOut\n})(TopBar);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/TopBar/index.js"],"names":["React","Component","PropTypes","connect","LoginModal","RESET_FORM","SIGNIN_FORM","SIGNUP_FORM","logUserOut","toast","classTogglerBuilder","logo","TopBar","state","isNavListVisible","isModalOpen","formToOpen","navClickHandler","event","preventDefault","stopPropagation","target","tagName","setState","prevState","openModalWithForm","closeModal","logoutClickHandler","info","props","toggleNavListClassBy","navListClass","isUserLoggedIn","username","propTypes","func","bool","string","mapStateToProps","User"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport LoginModal from \"./LoginModal.js\";\nimport { RESET_FORM, SIGNIN_FORM, SIGNUP_FORM } from \"../../constants\";\nimport { logUserOut } from \"../../actions/userActions.js\";\nimport { toast } from \"react-toastify\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\n\nimport logo from \"../../assets/images/logo.png\";\nimport \"../../styles/TopBar.css\";\n\nclass TopBar extends Component {\n    static propTypes = {\n        logUserOut: PropTypes.func,\n        isUserLoggedIn: PropTypes.bool,\n        username: PropTypes.string\n    };\n\n    state = {\n        isNavListVisible: false,\n        isModalOpen: false,\n        formToOpen: SIGNIN_FORM\n    };\n\n    // if width of web page is more than 768px,\n    // nav's child node ul will overlap nav,\n    // at this time, click's event.target is ul.\n    // Only set state to toggle li open/close when in mobile\n    navClickHandler = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        // check event target's tagName, only set state when it's \"NAV\"\n        if (event.target.tagName === \"NAV\") {\n            this.setState(prevState => ({\n                isNavListVisible: !prevState.isNavListVisible\n            }));\n        }\n    };\n\n    // open modal with specific form\n    openModalWithForm = formToOpen => event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // make sure formToOpen is one of three pre-defined forms\n        if (\n            formToOpen === RESET_FORM ||\n            formToOpen === SIGNIN_FORM ||\n            formToOpen === SIGNUP_FORM\n        )\n            this.setState({ isModalOpen: true, formToOpen });\n        else return;\n    };\n\n    closeModal = event => {\n        if (event) event.preventDefault();\n        this.setState({ isModalOpen: false });\n    };\n\n    logoutClickHandler = event => {\n        event.stopPropagation();\n        event.preventDefault();\n        toast.info(\"ðŸ‘‹ See ya~\");\n        this.props.logUserOut();\n    };\n\n    toggleNavListClassBy = classTogglerBuilder(\n        \"cd-main-nav__list\",\n        \"cd-main-nav__list--is-visible\"\n    );\n\n    render() {\n        let navListClass = this.toggleNavListClassBy(\n            this.state.isNavListVisible\n        );\n        return (\n            <div>\n                <header className=\"cd-main-header\">\n                    <div className=\"cd-main-header__logo\">\n                        <img src={logo} alt=\"Logo\" />\n                        <span className=\"header-title\">Event Scheduler</span>\n                    </div>\n\n                    <nav className=\"cd-main-nav\" onClick={this.navClickHandler}>\n                        <ul className={navListClass}>\n                            <li>\n                                {this.props.isUserLoggedIn ? (\n                                    <span\n                                        className=\"cd-main-nav__item top-bar-nav--welcome-msg\"\n                                        href=\"#0\"\n                                    >\n                                        {`Hi there, ${this.props.username}`}\n                                    </span>\n                                ) : (\n                                    <a\n                                        className=\"cd-main-nav__item cd-main-nav__item--signin\"\n                                        href=\"#0\"\n                                        onClick={this.openModalWithForm(\n                                            SIGNIN_FORM\n                                        )}\n                                    >\n                                        Sign in\n                                    </a>\n                                )}\n                            </li>\n                            <li>\n                                {this.props.isUserLoggedIn ? (\n                                    <a\n                                        className=\"cd-main-nav__item top-bar-nav__item--logout\"\n                                        href=\"#0\"\n                                        onClick={this.logoutClickHandler}\n                                    >\n                                        Log out\n                                    </a>\n                                ) : (\n                                    <a\n                                        className=\"cd-main-nav__item cd-main-nav__item--signup\"\n                                        href=\"#0\"\n                                        onClick={this.openModalWithForm(\n                                            SIGNUP_FORM\n                                        )}\n                                    >\n                                        Sign up\n                                    </a>\n                                )}\n                            </li>\n                        </ul>\n                    </nav>\n                </header>\n                {/* if simply mount and unmout modal according to state, \n                there will be no animation for modal */}\n                <LoginModal\n                    isModalOpen={this.state.isModalOpen}\n                    formToOpen={this.state.formToOpen}\n                    closeModal={this.closeModal}\n                    openModalWithForm={this.openModalWithForm}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isUserLoggedIn: state.User.isUserLoggedIn,\n        username: state.User.username\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { logUserOut }\n)(TopBar);\n"]},"metadata":{},"sourceType":"module"}