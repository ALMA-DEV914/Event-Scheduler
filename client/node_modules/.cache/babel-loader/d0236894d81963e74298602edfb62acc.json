{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOG_OUT, USER_SIGN_IN } from \"./actionTypes.js\";\nimport { loadUserEvents, clearEvents } from \"./eventActions.js\";\nimport { AUTH_HEADER, LOCAL_USERNAME_KEY, LOCAL_TOKEN_KEY, LOCAL_EXPIRESAT_KEY } from \"../constants\";\n/**\n * User sign in action creator, return corresponding action,\n * also set axios auth token and save user info to local\n * @param {Object} userData response data from backend '/users' route\n * @param {Boolean} toRememberUser true if remember user\n */\n\nexport var signUserIn = function signUserIn(userData, toRememberUser) {\n  return function (dispatch) {\n    console.log(\"sign in user: \", userData);\n    var username = userData.username,\n        token = userData.token; // bearer token\n\n    var authToken = \"\".concat(AUTH_HEADER, \" \").concat(token); // set axios auth token, this will apply to all sequential requests\n\n    axios.defaults.headers.common[\"Authorization\"] = authToken; // save to localStorage\n\n    if (toRememberUser) {\n      // number of milesecond at which token expires according to local time\n      var expiresAt = Date.now() + userData.expiresIn * 1000;\n      localStorage.setItem(LOCAL_USERNAME_KEY, username);\n      localStorage.setItem(LOCAL_TOKEN_KEY, token);\n      localStorage.setItem(LOCAL_EXPIRESAT_KEY, expiresAt);\n    } // dispatch signin action\n\n\n    dispatch({\n      type: USER_SIGN_IN,\n      username: username\n    }); // dispatch load user events action\n\n    dispatch(loadUserEvents());\n  };\n};\nexport var logUserOut = function logUserOut() {\n  return function (dispatch) {\n    // delete axios auth token, this will apply to all sequential requests\n    delete axios.defaults.headers.common[\"Authorization\"]; // delete user info in localStorage\n\n    localStorage.removeItem(LOCAL_USERNAME_KEY);\n    localStorage.removeItem(LOCAL_TOKEN_KEY);\n    localStorage.removeItem(LOCAL_EXPIRESAT_KEY); // dispatch log out action\n\n    dispatch({\n      type: USER_LOG_OUT\n    }); // dispatch clear events action\n\n    dispatch(clearEvents());\n  };\n};","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/actions/userActions.js"],"names":["axios","USER_LOG_OUT","USER_SIGN_IN","loadUserEvents","clearEvents","AUTH_HEADER","LOCAL_USERNAME_KEY","LOCAL_TOKEN_KEY","LOCAL_EXPIRESAT_KEY","signUserIn","userData","toRememberUser","dispatch","console","log","username","token","authToken","defaults","headers","common","expiresAt","Date","now","expiresIn","localStorage","setItem","type","logUserOut","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,kBAA3C;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,mBAA5C;AACA,SACIC,WADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,mBAJJ,QAKO,cALP;AAOA;;;;;;;AAMA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,cAAX;AAAA,SAA8B,UAAAC,QAAQ,EAAI;AAChEC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,QAA9B;AADgE,QAExDK,QAFwD,GAEpCL,QAFoC,CAExDK,QAFwD;AAAA,QAE9CC,KAF8C,GAEpCN,QAFoC,CAE9CM,KAF8C,EAGhE;;AACA,QAAMC,SAAS,aAAMZ,WAAN,cAAqBW,KAArB,CAAf,CAJgE,CAKhE;;AACAhB,IAAAA,KAAK,CAACkB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDH,SAAjD,CANgE,CAOhE;;AACA,QAAIN,cAAJ,EAAoB;AAChB;AACA,UAAMU,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAab,QAAQ,CAACc,SAAT,GAAqB,IAApD;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqBpB,kBAArB,EAAyCS,QAAzC;AACAU,MAAAA,YAAY,CAACC,OAAb,CAAqBnB,eAArB,EAAsCS,KAAtC;AACAS,MAAAA,YAAY,CAACC,OAAb,CAAqBlB,mBAArB,EAA0Ca,SAA1C;AACH,KAd+D,CAehE;;;AACAT,IAAAA,QAAQ,CAAC;AACLe,MAAAA,IAAI,EAAEzB,YADD;AAELa,MAAAA,QAAQ,EAARA;AAFK,KAAD,CAAR,CAhBgE,CAoBhE;;AACAH,IAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACH,GAtByB;AAAA,CAAnB;AAwBP,OAAO,IAAMyB,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAhB,QAAQ,EAAI;AACxC;AACA,WAAOZ,KAAK,CAACkB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP,CAFwC,CAGxC;;AACAK,IAAAA,YAAY,CAACI,UAAb,CAAwBvB,kBAAxB;AACAmB,IAAAA,YAAY,CAACI,UAAb,CAAwBtB,eAAxB;AACAkB,IAAAA,YAAY,CAACI,UAAb,CAAwBrB,mBAAxB,EANwC,CAOxC;;AACAI,IAAAA,QAAQ,CAAC;AACLe,MAAAA,IAAI,EAAE1B;AADD,KAAD,CAAR,CARwC,CAWxC;;AACAW,IAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACH,GAbyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport { USER_LOG_OUT, USER_SIGN_IN } from \"./actionTypes.js\";\nimport { loadUserEvents, clearEvents } from \"./eventActions.js\";\nimport {\n    AUTH_HEADER,\n    LOCAL_USERNAME_KEY,\n    LOCAL_TOKEN_KEY,\n    LOCAL_EXPIRESAT_KEY\n} from \"../constants\";\n\n/**\n * User sign in action creator, return corresponding action,\n * also set axios auth token and save user info to local\n * @param {Object} userData response data from backend '/users' route\n * @param {Boolean} toRememberUser true if remember user\n */\nexport const signUserIn = (userData, toRememberUser) => dispatch => {\n    console.log(\"sign in user: \", userData);\n    const { username, token } = userData;\n    // bearer token\n    const authToken = `${AUTH_HEADER} ${token}`;\n    // set axios auth token, this will apply to all sequential requests\n    axios.defaults.headers.common[\"Authorization\"] = authToken;\n    // save to localStorage\n    if (toRememberUser) {\n        // number of milesecond at which token expires according to local time\n        const expiresAt = Date.now() + userData.expiresIn * 1000;\n        localStorage.setItem(LOCAL_USERNAME_KEY, username);\n        localStorage.setItem(LOCAL_TOKEN_KEY, token);\n        localStorage.setItem(LOCAL_EXPIRESAT_KEY, expiresAt);\n    }\n    // dispatch signin action\n    dispatch({\n        type: USER_SIGN_IN,\n        username\n    });\n    // dispatch load user events action\n    dispatch(loadUserEvents());\n};\n\nexport const logUserOut = () => dispatch => {\n    // delete axios auth token, this will apply to all sequential requests\n    delete axios.defaults.headers.common[\"Authorization\"];\n    // delete user info in localStorage\n    localStorage.removeItem(LOCAL_USERNAME_KEY);\n    localStorage.removeItem(LOCAL_TOKEN_KEY);\n    localStorage.removeItem(LOCAL_EXPIRESAT_KEY);\n    // dispatch log out action\n    dispatch({\n        type: USER_LOG_OUT\n    });\n    // dispatch clear events action\n    dispatch(clearEvents());\n};\n"]},"metadata":{},"sourceType":"module"}