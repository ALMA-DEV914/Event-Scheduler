{"ast":null,"code":"import axios from \"axios\";\nimport { DEMO_EVENTS, EVENT_API_ROUTE } from \"../constants\";\nimport { SET_EVENTS, ADD_EVENT, DELETE_EVENTS, UPDATE_EVENT, SET_ERROR, CLEAR_ERROR, LOAD_USER_EVENTS_BEGIN, LOAD_USER_EVENTS_FINISH } from \"./actionTypes.js\"; // set store's events using given events\n\nexport var setEvents = function setEvents(events) {\n  return function (dispatch) {\n    // events should be an array of event objects\n    dispatch({\n      type: SET_EVENTS,\n      events: events\n    });\n  };\n}; // clear store's events\n\nexport var clearEvents = function clearEvents() {\n  return setEvents([]);\n}; // add event locally\n\nexport var addEvent = function addEvent(event) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_EVENT,\n      event: event\n    });\n  };\n}; // delete events locally\n\nexport var deleteEvents = function deleteEvents(eventIdsToDelete) {\n  return function (dispatch) {\n    // eventIdsToDelete should be an array of event ids\n    dispatch({\n      type: DELETE_EVENTS,\n      eventIdsToDelete: eventIdsToDelete\n    });\n  };\n}; // update event locally\n\nexport var updateEvent = function updateEvent(newEvent) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_EVENT,\n      newEvent: newEvent\n    });\n  };\n};\nexport var setError = function setError(error) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_ERROR,\n      error: error\n    });\n  };\n};\nexport var clearError = function clearError() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_ERROR\n    });\n  };\n}; // load demo events\n\nexport var loadDemoEvents = function loadDemoEvents() {\n  return function (dispatch) {\n    dispatch(setEvents(DEMO_EVENTS));\n  };\n}; // todo: handle token expired\n// load user's event from API\n\nexport var loadUserEvents = function loadUserEvents() {\n  return function (dispatch) {\n    dispatch({\n      type: LOAD_USER_EVENTS_BEGIN\n    });\n    axios.get(\"\".concat(EVENT_API_ROUTE, \"/all\")).then(function (res) {\n      dispatch({\n        type: LOAD_USER_EVENTS_FINISH\n      });\n      var userEvents = res.data.data.events;\n      dispatch(setEvents(userEvents));\n    }).catch(function (err) {\n      dispatch({\n        type: LOAD_USER_EVENTS_FINISH\n      });\n\n      if (err.response) {\n        // http error response\n        var errorRes = err.response.data.error;\n        dispatch(setError(errorRes));\n      } else {\n        // local network error\n        dispatch(setError(err));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/actions/eventActions.js"],"names":["axios","DEMO_EVENTS","EVENT_API_ROUTE","SET_EVENTS","ADD_EVENT","DELETE_EVENTS","UPDATE_EVENT","SET_ERROR","CLEAR_ERROR","LOAD_USER_EVENTS_BEGIN","LOAD_USER_EVENTS_FINISH","setEvents","events","dispatch","type","clearEvents","addEvent","event","deleteEvents","eventIdsToDelete","updateEvent","newEvent","setError","error","clearError","loadDemoEvents","loadUserEvents","get","then","res","userEvents","data","catch","err","response","errorRes"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { DEMO_EVENTS, EVENT_API_ROUTE } from \"../constants\";\nimport {\n    SET_EVENTS,\n    ADD_EVENT,\n    DELETE_EVENTS,\n    UPDATE_EVENT,\n    SET_ERROR,\n    CLEAR_ERROR,\n    LOAD_USER_EVENTS_BEGIN,\n    LOAD_USER_EVENTS_FINISH\n} from \"./actionTypes.js\";\n\n// set store's events using given events\nexport const setEvents = events => dispatch => {\n    // events should be an array of event objects\n    dispatch({\n        type: SET_EVENTS,\n        events\n    });\n};\n\n// clear store's events\nexport const clearEvents = () => setEvents([]);\n\n// add event locally\nexport const addEvent = event => dispatch => {\n    dispatch({\n        type: ADD_EVENT,\n        event\n    });\n};\n\n// delete events locally\nexport const deleteEvents = eventIdsToDelete => dispatch => {\n    // eventIdsToDelete should be an array of event ids\n    dispatch({\n        type: DELETE_EVENTS,\n        eventIdsToDelete\n    });\n};\n\n// update event locally\nexport const updateEvent = newEvent => dispatch => {\n    dispatch({\n        type: UPDATE_EVENT,\n        newEvent\n    });\n};\n\nexport const setError = error => dispatch => {\n    dispatch({\n        type: SET_ERROR,\n        error\n    });\n};\n\nexport const clearError = () => dispatch => {\n    dispatch({\n        type: CLEAR_ERROR\n    });\n};\n\n// load demo events\nexport const loadDemoEvents = () => dispatch => {\n    dispatch(setEvents(DEMO_EVENTS));\n};\n\n// todo: handle token expired\n// load user's event from API\nexport const loadUserEvents = () => dispatch => {\n    dispatch({ type: LOAD_USER_EVENTS_BEGIN });\n    axios\n        .get(`${EVENT_API_ROUTE}/all`)\n        .then(res => {\n            dispatch({ type: LOAD_USER_EVENTS_FINISH });\n            const userEvents = res.data.data.events;\n            dispatch(setEvents(userEvents));\n        })\n        .catch(err => {\n            dispatch({ type: LOAD_USER_EVENTS_FINISH });\n            if (err.response) {\n                // http error response\n                const errorRes = err.response.data.error;\n                dispatch(setError(errorRes));\n            } else {\n                // local network error\n                dispatch(setError(err));\n            }\n        });\n};\n"]},"metadata":{},"sourceType":"module"}