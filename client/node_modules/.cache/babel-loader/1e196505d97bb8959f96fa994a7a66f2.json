{"ast":null,"code":"import _objectSpread from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/almabraun/Event-Scheduler/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/almabraun/Event-Scheduler/client/src/components/TopBar/SigninForm.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { connect } from \"react-redux\";\nimport { signUserIn } from \"../../actions/userActions.js\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport { EMAIL, EMAIL_ERROR, PASSWORD, PASSWORD_ERROR, USER_API_ROUTE, USER_ERRORS } from \"../../constants\";\nimport \"../../styles/UserForm.css\";\n\nvar SigninForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SigninForm, _Component);\n\n  function SigninForm() {\n    var _getPrototypeOf2, _this$initialState;\n\n    var _this;\n\n    _classCallCheck(this, SigninForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SigninForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.initialState = (_this$initialState = {\n      isPasswordHidden: true\n    }, _defineProperty(_this$initialState, EMAIL, \"\"), _defineProperty(_this$initialState, EMAIL_ERROR, \"\"), _defineProperty(_this$initialState, PASSWORD, \"\"), _defineProperty(_this$initialState, PASSWORD_ERROR, \"\"), _defineProperty(_this$initialState, \"isWaitingApi\", false), _this$initialState);\n    _this.state = _objectSpread({}, _this.initialState);\n\n    _this.handleInputValueChange = function (event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name; // validate input and get error object\n\n      var err = userFormInputValidators[name](value);\n\n      _this.setState(_objectSpread({}, err, _defineProperty({}, name, value)));\n    };\n\n    _this.toggleHidePassword = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      _this.setState(function (prevState) {\n        return {\n          isPasswordHidden: !prevState.isPasswordHidden\n        };\n      });\n    };\n\n    _this.toggleInputClassBy = classTogglerBuilder(\"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\", \"cd-signin-modal__input--has-error\");\n    _this.toggleSpanClassBy = classTogglerBuilder(\"cd-signin-modal__error\", \"cd-signin-modal__error--is-visible\");\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault(); // check if required field is empty\n\n      var fields = [EMAIL, PASSWORD];\n      var errorFields = [EMAIL_ERROR, PASSWORD_ERROR];\n      var user = {};\n\n      for (var i = 0; i < fields.length; i++) {\n        var input = _this.state[fields[i]];\n\n        if (!input) {\n          return _this.setState(_defineProperty({}, errorFields[i], \"This field is required\"));\n        }\n\n        user[fields[i]] = input;\n      } // set state to indicate waiting api response\n\n\n      _this.setState({\n        isWaitingApi: true\n      }); // make a request to api\n\n\n      axios.post(\"\".concat(USER_API_ROUTE, \"/login\"), user).then(function (res) {\n        // reset state then close modal\n        _this.setState(_objectSpread({}, _this.initialState));\n\n        _this.props.closeModal();\n\n        toast.info(\"ðŸŽ‰ You are logged in!\"); // dispatch signin action\n\n        _this.props.signUserIn(res.data.data, _this.checkBox.checked);\n      }).catch(function (err) {\n        _this.setState({\n          isWaitingApi: false\n        });\n\n        if (err.response) {\n          var errorRes = err.response.data.error;\n          console.log(errorRes);\n\n          if (errorRes.name === USER_ERRORS.UserNotFound) {\n            _this.setState(_defineProperty({}, EMAIL_ERROR, \"Cannot find account with this email\"));\n          }\n\n          if (errorRes.name === USER_ERRORS.WrongPassword) {\n            _this.setState(_defineProperty({}, PASSWORD_ERROR, \"Wrong password\"));\n          }\n        } else {\n          // network error\n          console.log(err);\n          toast.warn(\"ðŸ˜± Connection to server failed\");\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SigninForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var emailValue = this.state[EMAIL],\n          emailError = this.state[EMAIL_ERROR],\n          passwordValue = this.state[PASSWORD],\n          passwordError = this.state[PASSWORD_ERROR];\n      var _this$state = this.state,\n          isPasswordHidden = _this$state.isPasswordHidden,\n          isWaitingApi = _this$state.isWaitingApi;\n      return React.createElement(\"form\", {\n        className: \"cd-signin-modal__form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\",\n        htmlFor: \"signin-email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"E-mail\"), React.createElement(\"input\", {\n        id: \"signin-email\",\n        type: \"email\",\n        placeholder: \"E-mail\",\n        name: EMAIL,\n        value: emailValue,\n        onChange: this.handleInputValueChange,\n        className: this.toggleInputClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(emailError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, emailError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cd-signin-modal__label cd-signin-modal__label--password cd-signin-modal__label--image-replace\",\n        htmlFor: \"signin-password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Password\"), React.createElement(\"input\", {\n        id: \"signin-password\",\n        placeholder: \"Password\",\n        name: PASSWORD,\n        value: passwordValue,\n        onChange: this.handleInputValueChange,\n        type: isPasswordHidden ? \"password\" : \"text\",\n        className: this.toggleInputClassBy(passwordError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"#0\",\n        className: \"cd-signin-modal__hide-password js-hide-password\",\n        onClick: this.toggleHidePassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, isPasswordHidden ? \"Show\" : \"Hide\"), React.createElement(\"span\", {\n        className: this.toggleSpanClassBy(passwordError),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, passwordError)), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"remember-me\",\n        className: \"cd-signin-modal__input\",\n        ref: function ref(ele) {\n          return _this2.checkBox = ele;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"remember-me\",\n        className: \"checkBox-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Remember me\")), React.createElement(\"p\", {\n        className: \"cd-signin-modal__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"cd-signin-modal__input cd-signin-modal__input--full-width\",\n        type: \"submit\",\n        disabled: isWaitingApi,\n        value: this.state.isWaitingApi ? \"Waiting response...\" : \"Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SigninForm;\n}(Component);\n\nSigninForm.propTypes = {\n  closeModal: PropTypes.func,\n  signUserIn: PropTypes.func\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = {\n  signUserIn: signUserIn\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SigninForm);","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/components/TopBar/SigninForm.js"],"names":["React","Component","PropTypes","axios","toast","connect","signUserIn","classTogglerBuilder","userFormInputValidators","EMAIL","EMAIL_ERROR","PASSWORD","PASSWORD_ERROR","USER_API_ROUTE","USER_ERRORS","SigninForm","initialState","isPasswordHidden","state","handleInputValueChange","event","target","value","name","err","setState","toggleHidePassword","preventDefault","stopPropagation","prevState","toggleInputClassBy","toggleSpanClassBy","handleSubmit","fields","errorFields","user","i","length","input","isWaitingApi","post","then","res","props","closeModal","info","data","checkBox","checked","catch","response","errorRes","error","console","log","UserNotFound","WrongPassword","warn","emailValue","emailError","passwordValue","passwordError","ele","propTypes","func","mapStateToProps","mapDispatchToProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SACIC,KADJ,EAEIC,WAFJ,EAGIC,QAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,WANJ,QAOO,iBAPP;AASA,OAAO,2BAAP;;IAEMC,U;;;;;;;;;;;;;;;;;UAMFC,Y;AACIC,MAAAA,gBAAgB,EAAE;2CACjBR,K,EAAQ,E,uCACRC,W,EAAc,E,uCACdC,Q,EAAW,E,uCACXC,c,EAAiB,E,uDACJ,K;UAGlBM,K,qBAAa,MAAKF,Y;;UAElBG,sB,GAAyB,UAAAC,KAAK,EAAI;AAC9B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB,CAH8B,CAK9B;;AACA,UAAMC,GAAG,GAAGhB,uBAAuB,CAACe,IAAD,CAAvB,CAA8BD,KAA9B,CAAZ;;AACA,YAAKG,QAAL,mBACOD,GADP,sBAEKD,IAFL,EAEYD,KAFZ;AAIH,K;;UAEDI,kB,GAAqB,UAAAN,KAAK,EAAI;AAC1BA,MAAAA,KAAK,CAACO,cAAN;AACAP,MAAAA,KAAK,CAACQ,eAAN;;AACA,YAAKH,QAAL,CAAc,UAAAI,SAAS;AAAA,eAAK;AACxBZ,UAAAA,gBAAgB,EAAE,CAACY,SAAS,CAACZ;AADL,SAAL;AAAA,OAAvB;AAGH,K;;UAEDa,kB,GAAqBvB,mBAAmB,CACpC,kIADoC,EAEpC,mCAFoC,C;UAKxCwB,iB,GAAoBxB,mBAAmB,CACnC,wBADmC,EAEnC,oCAFmC,C;;UAKvCyB,Y,GAAe,UAAAZ,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACO,cAAN,GADoB,CAEpB;;AACA,UAAMM,MAAM,GAAG,CAACxB,KAAD,EAAQE,QAAR,CAAf;AACA,UAAMuB,WAAW,GAAG,CAACxB,WAAD,EAAcE,cAAd,CAApB;AACA,UAAMuB,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,YAAIE,KAAK,GAAG,MAAKpB,KAAL,CAAWe,MAAM,CAACG,CAAD,CAAjB,CAAZ;;AACA,YAAI,CAACE,KAAL,EAAY;AACR,iBAAO,MAAKb,QAAL,qBACFS,WAAW,CAACE,CAAD,CADT,EACe,wBADf,EAAP;AAGH;;AACDD,QAAAA,IAAI,CAACF,MAAM,CAACG,CAAD,CAAP,CAAJ,GAAkBE,KAAlB;AACH,OAdmB,CAepB;;;AACA,YAAKb,QAAL,CAAc;AAAEc,QAAAA,YAAY,EAAE;AAAhB,OAAd,EAhBoB,CAiBpB;;;AACApC,MAAAA,KAAK,CACAqC,IADL,WACa3B,cADb,aACqCsB,IADrC,EAEKM,IAFL,CAEU,UAAAC,GAAG,EAAI;AACT;AACA,cAAKjB,QAAL,mBAAmB,MAAKT,YAAxB;;AACA,cAAK2B,KAAL,CAAWC,UAAX;;AACAxC,QAAAA,KAAK,CAACyC,IAAN,CAAW,uBAAX,EAJS,CAKT;;AACA,cAAKF,KAAL,CAAWrC,UAAX,CAAsBoC,GAAG,CAACI,IAAJ,CAASA,IAA/B,EAAqC,MAAKC,QAAL,CAAcC,OAAnD;AACH,OATL,EAUKC,KAVL,CAUW,UAAAzB,GAAG,EAAI;AACV,cAAKC,QAAL,CAAc;AAAEc,UAAAA,YAAY,EAAE;AAAhB,SAAd;;AACA,YAAIf,GAAG,CAAC0B,QAAR,EAAkB;AACd,cAAMC,QAAQ,GAAG3B,GAAG,CAAC0B,QAAJ,CAAaJ,IAAb,CAAkBM,KAAnC;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,cAAIA,QAAQ,CAAC5B,IAAT,KAAkBT,WAAW,CAACyC,YAAlC,EAAgD;AAC5C,kBAAK9B,QAAL,qBACKf,WADL,EACmB,qCADnB;AAGH;;AACD,cAAIyC,QAAQ,CAAC5B,IAAT,KAAkBT,WAAW,CAAC0C,aAAlC,EAAiD;AAC7C,kBAAK/B,QAAL,qBACKb,cADL,EACsB,gBADtB;AAGH;AACJ,SAbD,MAaO;AACH;AACAyC,UAAAA,OAAO,CAACC,GAAR,CAAY9B,GAAZ;AACApB,UAAAA,KAAK,CAACqD,IAAN,CAAW,gCAAX;AACH;AACJ,OA9BL;AA+BH,K;;;;;;;6BAEQ;AAAA;;AACL,UAAMC,UAAU,GAAG,KAAKxC,KAAL,CAAWT,KAAX,CAAnB;AAAA,UACIkD,UAAU,GAAG,KAAKzC,KAAL,CAAWR,WAAX,CADjB;AAAA,UAEIkD,aAAa,GAAG,KAAK1C,KAAL,CAAWP,QAAX,CAFpB;AAAA,UAGIkD,aAAa,GAAG,KAAK3C,KAAL,CAAWN,cAAX,CAHpB;AADK,wBAKsC,KAAKM,KAL3C;AAAA,UAKGD,gBALH,eAKGA,gBALH;AAAA,UAKqBsB,YALrB,eAKqBA,YALrB;AAML,aACI;AACI,QAAA,SAAS,EAAC,uBADd;AAEI,QAAA,QAAQ,EAAE,KAAKP,YAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII;AAAG,QAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,SAAS,EAAC,4FADd;AAEI,QAAA,OAAO,EAAC,cAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAOI;AACI,QAAA,EAAE,EAAC,cADP;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,WAAW,EAAC,QAHhB;AAII,QAAA,IAAI,EAAEvB,KAJV;AAKI,QAAA,KAAK,EAAEiD,UALX;AAMI,QAAA,QAAQ,EAAE,KAAKvC,sBANnB;AAOI,QAAA,SAAS,EAAE,KAAKW,kBAAL,CAAwB6B,UAAxB,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAgBI;AAAM,QAAA,SAAS,EAAE,KAAK5B,iBAAL,CAAuB4B,UAAvB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,UADL,CAhBJ,CAJJ,EAyBI;AAAG,QAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,SAAS,EAAC,+FADd;AAEI,QAAA,OAAO,EAAC,iBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAOI;AACI,QAAA,EAAE,EAAC,iBADP;AAEI,QAAA,WAAW,EAAC,UAFhB;AAGI,QAAA,IAAI,EAAEhD,QAHV;AAII,QAAA,KAAK,EAAEiD,aAJX;AAKI,QAAA,QAAQ,EAAE,KAAKzC,sBALnB;AAMI,QAAA,IAAI,EAAEF,gBAAgB,GAAG,UAAH,GAAgB,MAN1C;AAOI,QAAA,SAAS,EAAE,KAAKa,kBAAL,CAAwB+B,aAAxB,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAgBI;AACI,QAAA,IAAI,EAAC,IADT;AAEI,QAAA,SAAS,EAAC,iDAFd;AAGI,QAAA,OAAO,EAAE,KAAKnC,kBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKKT,gBAAgB,GAAG,MAAH,GAAY,MALjC,CAhBJ,EAuBI;AAAM,QAAA,SAAS,EAAE,KAAKc,iBAAL,CAAuB8B,aAAvB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,aADL,CAvBJ,CAzBJ,EAqDI;AAAG,QAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,EAAE,EAAC,aAFP;AAGI,QAAA,SAAS,EAAC,wBAHd;AAII,QAAA,GAAG,EAAE,aAAAC,GAAG;AAAA,iBAAK,MAAI,CAACf,QAAL,GAAgBe,GAArB;AAAA,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI;AAAO,QAAA,OAAO,EAAC,aAAf;AAA6B,QAAA,SAAS,EAAC,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPJ,CArDJ,EAiEI;AAAG,QAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,SAAS,EAAC,2DADd;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,QAAQ,EAAEvB,YAHd;AAII,QAAA,KAAK,EACD,KAAKrB,KAAL,CAAWqB,YAAX,GACM,qBADN,GAEM,OAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAjEJ,CADJ;AAgFH;;;;EAzLoBtC,S;;AAAnBc,U,CACKgD,S,GAAY;AACfnB,EAAAA,UAAU,EAAE1C,SAAS,CAAC8D,IADP;AAEf1D,EAAAA,UAAU,EAAEJ,SAAS,CAAC8D;AAFP,C;;AA2LvB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA/C,KAAK;AAAA,SAAK,EAAL;AAAA,CAA7B;;AAEA,IAAMgD,kBAAkB,GAAG;AAAE5D,EAAAA,UAAU,EAAVA;AAAF,CAA3B;AAEA,eAAeD,OAAO,CAClB4D,eADkB,EAElBC,kBAFkB,CAAP,CAGbnD,UAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { connect } from \"react-redux\";\nimport { signUserIn } from \"../../actions/userActions.js\";\nimport classTogglerBuilder from \"../../utils/classTogglerBuilder.js\";\nimport { userFormInputValidators } from \"../../utils/validators.js\";\nimport {\n    EMAIL,\n    EMAIL_ERROR,\n    PASSWORD,\n    PASSWORD_ERROR,\n    USER_API_ROUTE,\n    USER_ERRORS\n} from \"../../constants\";\n\nimport \"../../styles/UserForm.css\";\n\nclass SigninForm extends Component {\n    static propTypes = {\n        closeModal: PropTypes.func,\n        signUserIn: PropTypes.func\n    };\n\n    initialState = {\n        isPasswordHidden: true,\n        [EMAIL]: \"\",\n        [EMAIL_ERROR]: \"\",\n        [PASSWORD]: \"\",\n        [PASSWORD_ERROR]: \"\",\n        isWaitingApi: false\n    };\n\n    state = { ...this.initialState };\n\n    handleInputValueChange = event => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        // validate input and get error object\n        const err = userFormInputValidators[name](value);\n        this.setState({\n            ...err,\n            [name]: value\n        });\n    };\n\n    toggleHidePassword = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState(prevState => ({\n            isPasswordHidden: !prevState.isPasswordHidden\n        }));\n    };\n\n    toggleInputClassBy = classTogglerBuilder(\n        \"cd-signin-modal__input cd-signin-modal__input--full-width cd-signin-modal__input--has-padding cd-signin-modal__input--has-border\",\n        \"cd-signin-modal__input--has-error\"\n    );\n\n    toggleSpanClassBy = classTogglerBuilder(\n        \"cd-signin-modal__error\",\n        \"cd-signin-modal__error--is-visible\"\n    );\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // check if required field is empty\n        const fields = [EMAIL, PASSWORD];\n        const errorFields = [EMAIL_ERROR, PASSWORD_ERROR];\n        const user = {};\n        for (let i = 0; i < fields.length; i++) {\n            let input = this.state[fields[i]];\n            if (!input) {\n                return this.setState({\n                    [errorFields[i]]: \"This field is required\"\n                });\n            }\n            user[fields[i]] = input;\n        }\n        // set state to indicate waiting api response\n        this.setState({ isWaitingApi: true });\n        // make a request to api\n        axios\n            .post(`${USER_API_ROUTE}/login`, user)\n            .then(res => {\n                // reset state then close modal\n                this.setState({ ...this.initialState });\n                this.props.closeModal();\n                toast.info(\"ðŸŽ‰ You are logged in!\");\n                // dispatch signin action\n                this.props.signUserIn(res.data.data, this.checkBox.checked);\n            })\n            .catch(err => {\n                this.setState({ isWaitingApi: false });\n                if (err.response) {\n                    const errorRes = err.response.data.error;\n                    console.log(errorRes);\n                    if (errorRes.name === USER_ERRORS.UserNotFound) {\n                        this.setState({\n                            [EMAIL_ERROR]: \"Cannot find account with this email\"\n                        });\n                    }\n                    if (errorRes.name === USER_ERRORS.WrongPassword) {\n                        this.setState({\n                            [PASSWORD_ERROR]: \"Wrong password\"\n                        });\n                    }\n                } else {\n                    // network error\n                    console.log(err);\n                    toast.warn(\"ðŸ˜± Connection to server failed\");\n                }\n            });\n    };\n\n    render() {\n        const emailValue = this.state[EMAIL],\n            emailError = this.state[EMAIL_ERROR],\n            passwordValue = this.state[PASSWORD],\n            passwordError = this.state[PASSWORD_ERROR];\n        const { isPasswordHidden, isWaitingApi } = this.state;\n        return (\n            <form\n                className=\"cd-signin-modal__form\"\n                onSubmit={this.handleSubmit}\n            >\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--email cd-signin-modal__label--image-replace\"\n                        htmlFor=\"signin-email\"\n                    >\n                        E-mail\n                    </label>\n                    <input\n                        id=\"signin-email\"\n                        type=\"email\"\n                        placeholder=\"E-mail\"\n                        name={EMAIL}\n                        value={emailValue}\n                        onChange={this.handleInputValueChange}\n                        className={this.toggleInputClassBy(emailError)}\n                    />\n                    <span className={this.toggleSpanClassBy(emailError)}>\n                        {emailError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <label\n                        className=\"cd-signin-modal__label cd-signin-modal__label--password cd-signin-modal__label--image-replace\"\n                        htmlFor=\"signin-password\"\n                    >\n                        Password\n                    </label>\n                    <input\n                        id=\"signin-password\"\n                        placeholder=\"Password\"\n                        name={PASSWORD}\n                        value={passwordValue}\n                        onChange={this.handleInputValueChange}\n                        type={isPasswordHidden ? \"password\" : \"text\"}\n                        className={this.toggleInputClassBy(passwordError)}\n                    />\n                    <a\n                        href=\"#0\"\n                        className=\"cd-signin-modal__hide-password js-hide-password\"\n                        onClick={this.toggleHidePassword}\n                    >\n                        {isPasswordHidden ? \"Show\" : \"Hide\"}\n                    </a>\n                    <span className={this.toggleSpanClassBy(passwordError)}>\n                        {passwordError}\n                    </span>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"remember-me\"\n                        className=\"cd-signin-modal__input\"\n                        ref={ele => (this.checkBox = ele)}\n                    />\n                    <label htmlFor=\"remember-me\" className=\"checkBox-label\">\n                        Remember me\n                    </label>\n                </p>\n\n                <p className=\"cd-signin-modal__fieldset\">\n                    <input\n                        className=\"cd-signin-modal__input cd-signin-modal__input--full-width\"\n                        type=\"submit\"\n                        disabled={isWaitingApi}\n                        value={\n                            this.state.isWaitingApi\n                                ? \"Waiting response...\"\n                                : \"Login\"\n                        }\n                    />\n                </p>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = { signUserIn };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SigninForm);\n"]},"metadata":{},"sourceType":"module"}