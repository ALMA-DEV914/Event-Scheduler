{"ast":null,"code":"/**\n * Convert a decimal integer to html hex color string\n * @param {Number} decimal must be integer in range [0, 16777215]\n * @returns {String} html hex color string\n */\nexport var toHexColor = function toHexColor(decimal) {\n  // input validation\n  if (!Number.isInteger(decimal)) {\n    console.error(\"Input \".concat(decimal, \" for toHexColor() is invalid\"));\n    return \"#ffffff\";\n  } // boundary checking\n\n\n  if (decimal < 0 || decimal > 16777215) {\n    console.warn(\"Input \".concat(decimal, \" for toHexColor() is out of bound\"));\n    return \"#ffffff\";\n  } // convert decimal to hex color\n\n\n  var hexColor = decimal.toString(16); // fill '0' until length === 6\n\n  while (hexColor.length < 6) {\n    hexColor = \"0\" + hexColor;\n  } // html hex color string has '#' prefix\n\n\n  return \"#\" + hexColor;\n};\n/**\n * Convert a html hex color string to decimal integer value\n * @param {String} hexColor html hex color string\n * @returns {Number} html color decimal integer\n */\n\nexport var toDecimal = function toDecimal(hexColor) {\n  // input validation\n  if (typeof hexColor !== \"string\" || hexColor.length !== 7 || hexColor.charAt(0) !== \"#\") {\n    console.error(\"Input \".concat(hexColor, \" for toDecimal() is invalid\"));\n    return 0;\n  } // get rid of '#' prefix and parse to integer\n\n\n  var value = parseInt(hexColor.slice(1), 16); // check if value is NaN, which indicates given input is not a hex color string\n\n  if (Number.isNaN(value)) {\n    console.warn(\"Input \".concat(hexColor, \" for toDecimal() is not a valid hex color string\"));\n    return 16777215;\n  }\n\n  return value;\n};","map":{"version":3,"sources":["/Users/almabraun/Event-Scheduler/client/src/utils/colorConverters.js"],"names":["toHexColor","decimal","Number","isInteger","console","error","warn","hexColor","toString","length","toDecimal","charAt","value","parseInt","slice","isNaN"],"mappings":"AAAA;;;;;AAKA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO,EAAI;AACjC;AACA,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,OAAjB,CAAL,EAAgC;AAC5BG,IAAAA,OAAO,CAACC,KAAR,iBAAuBJ,OAAvB;AACA,WAAO,SAAP;AACH,GALgC,CAMjC;;;AACA,MAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,QAA7B,EAAuC;AACnCG,IAAAA,OAAO,CAACE,IAAR,iBAAsBL,OAAtB;AACA,WAAO,SAAP;AACH,GAVgC,CAWjC;;;AACA,MAAIM,QAAQ,GAAGN,OAAO,CAACO,QAAR,CAAiB,EAAjB,CAAf,CAZiC,CAajC;;AACA,SAAOD,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4B;AACxBF,IAAAA,QAAQ,GAAG,MAAMA,QAAjB;AACH,GAhBgC,CAiBjC;;;AACA,SAAO,MAAMA,QAAb;AACH,CAnBM;AAqBP;;;;;;AAKA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAH,QAAQ,EAAI;AACjC;AACA,MACI,OAAOA,QAAP,KAAoB,QAApB,IACAA,QAAQ,CAACE,MAAT,KAAoB,CADpB,IAEAF,QAAQ,CAACI,MAAT,CAAgB,CAAhB,MAAuB,GAH3B,EAIE;AACEP,IAAAA,OAAO,CAACC,KAAR,iBAAuBE,QAAvB;AACA,WAAO,CAAP;AACH,GATgC,CAUjC;;;AACA,MAAMK,KAAK,GAAGC,QAAQ,CAACN,QAAQ,CAACO,KAAT,CAAe,CAAf,CAAD,EAAoB,EAApB,CAAtB,CAXiC,CAYjC;;AACA,MAAIZ,MAAM,CAACa,KAAP,CAAaH,KAAb,CAAJ,EAAyB;AACrBR,IAAAA,OAAO,CAACE,IAAR,iBACaC,QADb;AAGA,WAAO,QAAP;AACH;;AACD,SAAOK,KAAP;AACH,CApBM","sourcesContent":["/**\n * Convert a decimal integer to html hex color string\n * @param {Number} decimal must be integer in range [0, 16777215]\n * @returns {String} html hex color string\n */\nexport const toHexColor = decimal => {\n    // input validation\n    if (!Number.isInteger(decimal)) {\n        console.error(`Input ${decimal} for toHexColor() is invalid`);\n        return \"#ffffff\";\n    }\n    // boundary checking\n    if (decimal < 0 || decimal > 16777215) {\n        console.warn(`Input ${decimal} for toHexColor() is out of bound`);\n        return \"#ffffff\";\n    }\n    // convert decimal to hex color\n    let hexColor = decimal.toString(16);\n    // fill '0' until length === 6\n    while (hexColor.length < 6) {\n        hexColor = \"0\" + hexColor;\n    }\n    // html hex color string has '#' prefix\n    return \"#\" + hexColor;\n};\n\n/**\n * Convert a html hex color string to decimal integer value\n * @param {String} hexColor html hex color string\n * @returns {Number} html color decimal integer\n */\nexport const toDecimal = hexColor => {\n    // input validation\n    if (\n        typeof hexColor !== \"string\" ||\n        hexColor.length !== 7 ||\n        hexColor.charAt(0) !== \"#\"\n    ) {\n        console.error(`Input ${hexColor} for toDecimal() is invalid`);\n        return 0;\n    }\n    // get rid of '#' prefix and parse to integer\n    const value = parseInt(hexColor.slice(1), 16);\n    // check if value is NaN, which indicates given input is not a hex color string\n    if (Number.isNaN(value)) {\n        console.warn(\n            `Input ${hexColor} for toDecimal() is not a valid hex color string`\n        );\n        return 16777215;\n    }\n    return value;\n};\n"]},"metadata":{},"sourceType":"module"}